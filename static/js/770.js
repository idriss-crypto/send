"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[770],{99770:(e,a,t)=>{t.r(a),t.d(a,{ccipFetch:()=>k,offchainLookup:()=>g,offchainLookupAbiItem:()=>y,offchainLookupSignature:()=>m});var r=t(76143),s=t(96070),n=t(62027),o=t(38673);class c extends n.G{constructor({callbackSelector:e,cause:a,data:t,extraData:r,sender:s,urls:n}){super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],a.metaMessages?.length?"":[],"Offchain Gateway Call:",n&&["  Gateway URL(s):",...n.map((e=>`    ${(0,o.Gr)(e)}`))],`  Sender: ${s}`,`  Data: ${t}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class d extends n.G{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,o.Gr)(a)}`,`Response: ${(0,s.P)(e)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class l extends n.G{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}var u=t(78863),i=t(86899),f=t(45444),h=t(26087),p=t(49321),b=t(57040),w=t(15102);const m="0x556f1830",y={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function g(e,{blockNumber:a,blockTag:t,data:s,to:n}){const{args:o}=(0,i.p)({data:s,abi:[y]}),[d,u,w,m,g]=o;try{if(!function(e,a){if(!(0,p.U)(e))throw new h.b({address:e});if(!(0,p.U)(a))throw new h.b({address:a});return e.toLowerCase()===a.toLowerCase()}(n,d))throw new l({sender:d,to:n});const s=await k({data:w,sender:d,urls:u}),{data:o}=await(0,r.R)(e,{blockNumber:a,blockTag:t,data:(0,b.zo)([m,(0,f.E)([{type:"bytes"},{type:"bytes"}],[s,g])]),to:n});return o}catch(e){throw new c({callbackSelector:m,cause:e,data:s,extraData:g,sender:d,urls:u})}}async function k({data:e,sender:a,urls:t}){let r=new Error("An unknown error occurred.");for(let n=0;n<t.length;n++){const o=t[n],c=o.includes("{data}")?"GET":"POST",l="POST"===c?{data:e,sender:a}:void 0;try{const t=await fetch(o.replace("{sender}",a).replace("{data}",e),{body:JSON.stringify(l),method:c});let n;if(n=t.headers.get("Content-Type")?.startsWith("application/json")?(await t.json()).data:await t.text(),!t.ok){r=new u.Gg({body:l,details:n?.error?(0,s.P)(n.error):t.statusText,headers:t.headers,status:t.status,url:o});continue}if(!(0,w.v)(n)){r=new d({result:n,url:o});continue}return n}catch(e){r=new u.Gg({body:l,details:e.message,url:o})}}throw r}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,