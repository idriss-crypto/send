"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[218],{79218:(t,e,r)=>{r.r(e),r.d(e,{AlchemyProvider:()=>c});var n=r(2446),i=r(67178),o=r(27801),s=r(64128);r(9669);class a{constructor(t,e=100){this.sendBatchFn=t,this.maxBatchSize=e,this.pendingBatch=[]}enqueueRequest(t){return(0,n._)(this,void 0,void 0,(function*(){const e={request:t,resolve:void 0,reject:void 0},r=new Promise(((t,r)=>{e.resolve=t,e.reject=r}));return this.pendingBatch.push(e),this.pendingBatch.length===this.maxBatchSize?this.sendBatchRequest():this.pendingBatchTimer||(this.pendingBatchTimer=setTimeout((()=>this.sendBatchRequest()),10)),r}))}sendBatchRequest(){return(0,n._)(this,void 0,void 0,(function*(){const t=this.pendingBatch;this.pendingBatch=[],this.pendingBatchTimer&&(clearTimeout(this.pendingBatchTimer),this.pendingBatchTimer=void 0);const e=t.map((t=>t.request));return this.sendBatchFn(e).then((e=>{t.forEach(((t,r)=>{const n=e[r];if(n.error){const e=new Error(n.error.message);e.code=n.error.code,e.data=n.error.data,t.reject(e)}else t.resolve(n.result)}))}),(e=>{t.forEach((t=>{t.reject(e)}))}))}))}}class c extends o.r{constructor(t){const e=c.getApiKey(t.apiKey),r=c.getAlchemyNetwork(t.network),i=c.getAlchemyConnectionInfo(r,e,"http");void 0!==t.url&&(i.url=t.url),i.throttleLimit=t.maxRetries,super(i,n.E[r]),this.apiKey=t.apiKey,this.maxRetries=t.maxRetries,this.batchRequests=t.batchRequests;const o=Object.assign(Object.assign({},this.connection),{headers:Object.assign(Object.assign({},this.connection.headers),{"Alchemy-Ethers-Sdk-Method":"batchSend"})});this.batcher=new a((t=>(0,s.rd)(o,JSON.stringify(t))))}static getApiKey(t){if(null==t)return n.D;if(t&&"string"!=typeof t)throw new Error(`Invalid apiKey '${t}' provided. apiKey must be a string.`);return t}static getNetwork(t){return"string"==typeof t&&t in n.C?n.C[t]:(0,i.H)(t)}static getAlchemyNetwork(t){if(void 0===t)return n.a;if("number"==typeof t)throw new Error(`Invalid network '${t}' provided. Network must be a string.`);if(!Object.values(n.N).includes(t))throw new Error(`Invalid network '${t}' provided. Network must be one of: ${Object.values(n.N).join(", ")}.`);return t}static getAlchemyConnectionInfo(t,e,r){const i="http"===r?(0,n.g)(t,e):(0,n.b)(t,e);return{headers:n.I?{"Alchemy-Ethers-Sdk-Version":n.V}:{"Alchemy-Ethers-Sdk-Version":n.V,"Accept-Encoding":"gzip"},allowGzip:!0,url:i}}detectNetwork(){const t=Object.create(null,{detectNetwork:{get:()=>super.detectNetwork}});return(0,n._)(this,void 0,void 0,(function*(){let e=this.network;if(null==e&&(e=yield t.detectNetwork.call(this),!e))throw new Error("No network detected");return e}))}_startPending(){(0,n.l)("WARNING: Alchemy Provider does not support pending filters")}isCommunityResource(){return this.apiKey===n.D}send(t,e){return this._send(t,e,"send")}_send(t,e,r,i=!1){const o={method:t,params:e,id:this._nextId++,jsonrpc:"2.0"};if(Object.assign({},this.connection).headers["Alchemy-Ethers-Sdk-Method"]=r,this.batchRequests||i)return this.batcher.enqueueRequest(o);this.emit("debug",{action:"request",request:(0,n.d)(o),provider:this});const a=["eth_chainId","eth_blockNumber"].indexOf(t)>=0;if(a&&this._cache[t])return this._cache[t];const c=(0,s.rd)(this.connection,JSON.stringify(o),l).then((t=>(this.emit("debug",{action:"response",request:o,response:t,provider:this}),t)),(t=>{throw this.emit("debug",{action:"response",error:t,request:o,provider:this}),t}));return a&&(this._cache[t]=c,setTimeout((()=>{this._cache[t]=null}),0)),c}}function l(t){if(t.error){const e=new Error(t.error.message);throw e.code=t.error.code,e.data=t.error.data,e}return t.result}},26627:(t,e,r)=>{r.d(e,{J:()=>i,c:()=>o});var n=r(39157);function i(t){t=atob(t);const e=[];for(let r=0;r<t.length;r++)e.push(t.charCodeAt(r));return(0,n.lE)(e)}function o(t){t=(0,n.lE)(t);let e="";for(let r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return btoa(e)}},67178:(t,e,r)=>{r.d(e,{H:()=>u});const n=new(r(56487).Yd)("networks/5.7.1");function i(t){const e=function(e,r){null==r&&(r={});const n=[];if(e.InfuraProvider&&"-"!==r.infura)try{n.push(new e.InfuraProvider(t,r.infura))}catch(t){}if(e.EtherscanProvider&&"-"!==r.etherscan)try{n.push(new e.EtherscanProvider(t,r.etherscan))}catch(t){}if(e.AlchemyProvider&&"-"!==r.alchemy)try{n.push(new e.AlchemyProvider(t,r.alchemy))}catch(t){}if(e.PocketProvider&&"-"!==r.pocket){const i=["goerli","ropsten","rinkeby","sepolia"];try{const o=new e.PocketProvider(t,r.pocket);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(t){}}if(e.CloudflareProvider&&"-"!==r.cloudflare)try{n.push(new e.CloudflareProvider(t))}catch(t){}if(e.AnkrProvider&&"-"!==r.ankr)try{const i=["ropsten"],o=new e.AnkrProvider(t,r.ankr);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(t){}if(0===n.length)return null;if(e.FallbackProvider){let i=1;return null!=r.quorum?i=r.quorum:"homestead"===t&&(i=2),new e.FallbackProvider(n,i)}return n[0]};return e.renetwork=function(t){return i(t)},e}function o(t,e){const r=function(r,n){return r.JsonRpcProvider?new r.JsonRpcProvider(t,e):null};return r.renetwork=function(e){return o(t,e)},r}const s={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:i("homestead")},a={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:i("ropsten")},c={chainId:63,name:"classicMordor",_defaultProvider:o("https://www.ethercluster.com/mordor","classicMordor")},l={unspecified:{chainId:0,name:"unspecified"},homestead:s,mainnet:s,morden:{chainId:2,name:"morden"},ropsten:a,testnet:a,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:i("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:i("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:i("goerli")},kintsugi:{chainId:1337702,name:"kintsugi"},sepolia:{chainId:11155111,name:"sepolia",_defaultProvider:i("sepolia")},classic:{chainId:61,name:"classic",_defaultProvider:o("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor:c,classicTestnet:c,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:o("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic",_defaultProvider:i("matic")},maticmum:{chainId:80001,name:"maticmum"},optimism:{chainId:10,name:"optimism",_defaultProvider:i("optimism")},"optimism-kovan":{chainId:69,name:"optimism-kovan"},"optimism-goerli":{chainId:420,name:"optimism-goerli"},arbitrum:{chainId:42161,name:"arbitrum"},"arbitrum-rinkeby":{chainId:421611,name:"arbitrum-rinkeby"},"arbitrum-goerli":{chainId:421613,name:"arbitrum-goerli"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};function u(t){if(null==t)return null;if("number"==typeof t){for(const e in l){const r=l[e];if(r.chainId===t)return{name:r.name,chainId:r.chainId,ensAddress:r.ensAddress||null,_defaultProvider:r._defaultProvider||null}}return{chainId:t,name:"unknown"}}if("string"==typeof t){const e=l[t];return null==e?null:{name:e.name,chainId:e.chainId,ensAddress:e.ensAddress,_defaultProvider:e._defaultProvider||null}}const e=l[t.name];if(!e)return"number"!=typeof t.chainId&&n.throwArgumentError("invalid network chainId","network",t),t;0!==t.chainId&&t.chainId!==e.chainId&&n.throwArgumentError("network chainId mismatch","network",t);let r=t._defaultProvider||null;var i;return null==r&&e._defaultProvider&&(r=(i=e._defaultProvider)&&"function"==typeof i.renetwork?e._defaultProvider.renetwork(t):e._defaultProvider),{name:t.name,chainId:e.chainId,ensAddress:t.ensAddress||e.ensAddress||null,_defaultProvider:r}}},8164:(t,e,r)=>{r.d(e,{dk:()=>p,uj:()=>c,p$:()=>h,zG:()=>o,tu:()=>s,mE:()=>a,DC:()=>l});var n=r(56487);const i=new n.Yd("properties/5.7.0");function o(t,e,r){Object.defineProperty(t,e,{enumerable:!0,value:r,writable:!1})}function s(t,e){for(let r=0;r<32;r++){if(t[e])return t[e];if(!t.prototype||"object"!=typeof t.prototype)break;t=Object.getPrototypeOf(t.prototype).constructor}return null}function a(t){return e=this,r=void 0,i=function*(){const e=Object.keys(t).map((e=>{const r=t[e];return Promise.resolve(r).then((t=>({key:e,value:t})))}));return(yield Promise.all(e)).reduce(((t,e)=>(t[e.key]=e.value,t)),{})},new((n=void 0)||(n=Promise))((function(t,o){function s(t){try{c(i.next(t))}catch(t){o(t)}}function a(t){try{c(i.throw(t))}catch(t){o(t)}}function c(e){var r;e.done?t(e.value):(r=e.value,r instanceof n?r:new n((function(t){t(r)}))).then(s,a)}c((i=i.apply(e,r||[])).next())}));var e,r,n,i}function c(t,e){t&&"object"==typeof t||i.throwArgumentError("invalid object","object",t),Object.keys(t).forEach((r=>{e[r]||i.throwArgumentError("invalid object key - "+r,"transaction:"+r,t)}))}function l(t){const e={};for(const r in t)e[r]=t[r];return e}const u={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function f(t){if(null==t||u[typeof t])return!0;if(Array.isArray(t)||"object"==typeof t){if(!Object.isFrozen(t))return!1;const e=Object.keys(t);for(let r=0;r<e.length;r++){let n=null;try{n=t[e[r]]}catch(t){continue}if(!f(n))return!1}return!0}return i.throwArgumentError("Cannot deepCopy "+typeof t,"object",t)}function d(t){if(f(t))return t;if(Array.isArray(t))return Object.freeze(t.map((t=>h(t))));if("object"==typeof t){const e={};for(const r in t){const n=t[r];void 0!==n&&o(e,r,h(n))}return e}return i.throwArgumentError("Cannot deepCopy "+typeof t,"object",t)}function h(t){return d(t)}class p{constructor(t){for(const e in t)this[e]=h(t[e])}}},23792:(t,e,r)=>{r.d(e,{i:()=>n});const n="providers/5.7.2"},27801:(t,e,r)=>{r.d(e,{r:()=>mr});var n=r(8164),i=r(56487),o=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{c(n.next(t))}catch(t){o(t)}}function a(t){try{c(n.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};const s=new i.Yd("abstract-signer/5.7.0"),a=["accessList","ccipReadEnabled","chainId","customData","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],c=[i.Yd.errors.INSUFFICIENT_FUNDS,i.Yd.errors.NONCE_EXPIRED,i.Yd.errors.REPLACEMENT_UNDERPRICED];class l{constructor(){s.checkAbstract(new.target,l),(0,n.zG)(this,"_isSigner",!0)}getBalance(t){return o(this,void 0,void 0,(function*(){return this._checkProvider("getBalance"),yield this.provider.getBalance(this.getAddress(),t)}))}getTransactionCount(t){return o(this,void 0,void 0,(function*(){return this._checkProvider("getTransactionCount"),yield this.provider.getTransactionCount(this.getAddress(),t)}))}estimateGas(t){return o(this,void 0,void 0,(function*(){this._checkProvider("estimateGas");const e=yield(0,n.mE)(this.checkTransaction(t));return yield this.provider.estimateGas(e)}))}call(t,e){return o(this,void 0,void 0,(function*(){this._checkProvider("call");const r=yield(0,n.mE)(this.checkTransaction(t));return yield this.provider.call(r,e)}))}sendTransaction(t){return o(this,void 0,void 0,(function*(){this._checkProvider("sendTransaction");const e=yield this.populateTransaction(t),r=yield this.signTransaction(e);return yield this.provider.sendTransaction(r)}))}getChainId(){return o(this,void 0,void 0,(function*(){return this._checkProvider("getChainId"),(yield this.provider.getNetwork()).chainId}))}getGasPrice(){return o(this,void 0,void 0,(function*(){return this._checkProvider("getGasPrice"),yield this.provider.getGasPrice()}))}getFeeData(){return o(this,void 0,void 0,(function*(){return this._checkProvider("getFeeData"),yield this.provider.getFeeData()}))}resolveName(t){return o(this,void 0,void 0,(function*(){return this._checkProvider("resolveName"),yield this.provider.resolveName(t)}))}checkTransaction(t){for(const e in t)-1===a.indexOf(e)&&s.throwArgumentError("invalid transaction key: "+e,"transaction",t);const e=(0,n.DC)(t);return null==e.from?e.from=this.getAddress():e.from=Promise.all([Promise.resolve(e.from),this.getAddress()]).then((e=>(e[0].toLowerCase()!==e[1].toLowerCase()&&s.throwArgumentError("from address mismatch","transaction",t),e[0]))),e}populateTransaction(t){return o(this,void 0,void 0,(function*(){const e=yield(0,n.mE)(this.checkTransaction(t));null!=e.to&&(e.to=Promise.resolve(e.to).then((t=>o(this,void 0,void 0,(function*(){if(null==t)return null;const e=yield this.resolveName(t);return null==e&&s.throwArgumentError("provided ENS name resolves to null","tx.to",t),e})))),e.to.catch((t=>{})));const r=null!=e.maxFeePerGas||null!=e.maxPriorityFeePerGas;if(null==e.gasPrice||2!==e.type&&!r?0!==e.type&&1!==e.type||!r||s.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",t):s.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",t),2!==e.type&&null!=e.type||null==e.maxFeePerGas||null==e.maxPriorityFeePerGas)if(0===e.type||1===e.type)null==e.gasPrice&&(e.gasPrice=this.getGasPrice());else{const t=yield this.getFeeData();if(null==e.type)if(null!=t.maxFeePerGas&&null!=t.maxPriorityFeePerGas)if(e.type=2,null!=e.gasPrice){const t=e.gasPrice;delete e.gasPrice,e.maxFeePerGas=t,e.maxPriorityFeePerGas=t}else null==e.maxFeePerGas&&(e.maxFeePerGas=t.maxFeePerGas),null==e.maxPriorityFeePerGas&&(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas);else null!=t.gasPrice?(r&&s.throwError("network does not support EIP-1559",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==e.gasPrice&&(e.gasPrice=t.gasPrice),e.type=0):s.throwError("failed to get consistent fee data",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"});else 2===e.type&&(null==e.maxFeePerGas&&(e.maxFeePerGas=t.maxFeePerGas),null==e.maxPriorityFeePerGas&&(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas))}else e.type=2;return null==e.nonce&&(e.nonce=this.getTransactionCount("pending")),null==e.gasLimit&&(e.gasLimit=this.estimateGas(e).catch((t=>{if(c.indexOf(t.code)>=0)throw t;return s.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",i.Yd.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,tx:e})}))),null==e.chainId?e.chainId=this.getChainId():e.chainId=Promise.all([Promise.resolve(e.chainId),this.getChainId()]).then((e=>(0!==e[1]&&e[0]!==e[1]&&s.throwArgumentError("chainId address mismatch","transaction",t),e[0]))),yield(0,n.mE)(e)}))}_checkProvider(t){this.provider||s.throwError("missing provider",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:t||"_checkProvider"})}static isSigner(t){return!(!t||!t._isSigner)}}var u=r(65644),f=r(39157),d=r(91094),h=r.n(d);function p(t){return"0x"+h().keccak_256((0,f.lE)(t))}const m=new i.Yd("rlp/5.7.0");function g(t){const e=[];for(;t;)e.unshift(255&t),t>>=8;return e}function A(t,e,r){let n=0;for(let i=0;i<r;i++)n=256*n+t[e+i];return n}function v(t){if(Array.isArray(t)){let e=[];if(t.forEach((function(t){e=e.concat(v(t))})),e.length<=55)return e.unshift(192+e.length),e;const r=g(e.length);return r.unshift(247+r.length),r.concat(e)}(0,f.Zq)(t)||m.throwArgumentError("RLP object must be BytesLike","object",t);const e=Array.prototype.slice.call((0,f.lE)(t));if(1===e.length&&e[0]<=127)return e;if(e.length<=55)return e.unshift(128+e.length),e;const r=g(e.length);return r.unshift(183+r.length),r.concat(e)}function y(t){return(0,f.Dv)(v(t))}function b(t,e,r,n){const o=[];for(;r<e+1+n;){const s=w(t,r);o.push(s.result),(r+=s.consumed)>e+1+n&&m.throwError("child data too short",i.Yd.errors.BUFFER_OVERRUN,{})}return{consumed:1+n,result:o}}function w(t,e){if(0===t.length&&m.throwError("data too short",i.Yd.errors.BUFFER_OVERRUN,{}),t[e]>=248){const r=t[e]-247;e+1+r>t.length&&m.throwError("data short segment too short",i.Yd.errors.BUFFER_OVERRUN,{});const n=A(t,e+1,r);return e+1+r+n>t.length&&m.throwError("data long segment too short",i.Yd.errors.BUFFER_OVERRUN,{}),b(t,e,e+1+r,r+n)}if(t[e]>=192){const r=t[e]-192;return e+1+r>t.length&&m.throwError("data array too short",i.Yd.errors.BUFFER_OVERRUN,{}),b(t,e,e+1,r)}if(t[e]>=184){const r=t[e]-183;e+1+r>t.length&&m.throwError("data array too short",i.Yd.errors.BUFFER_OVERRUN,{});const n=A(t,e+1,r);return e+1+r+n>t.length&&m.throwError("data array too short",i.Yd.errors.BUFFER_OVERRUN,{}),{consumed:1+r+n,result:(0,f.Dv)(t.slice(e+1+r,e+1+r+n))}}if(t[e]>=128){const r=t[e]-128;return e+1+r>t.length&&m.throwError("data too short",i.Yd.errors.BUFFER_OVERRUN,{}),{consumed:1+r,result:(0,f.Dv)(t.slice(e+1,e+1+r))}}return{consumed:1,result:(0,f.Dv)(t[e])}}function E(t){const e=(0,f.lE)(t),r=w(e,0);return r.consumed!==e.length&&m.throwArgumentError("invalid rlp data","data",t),r.result}const k=new i.Yd("address/5.7.0");function N(t){(0,f.A7)(t,20)||k.throwArgumentError("invalid address","address",t);const e=(t=t.toLowerCase()).substring(2).split(""),r=new Uint8Array(40);for(let t=0;t<40;t++)r[t]=e[t].charCodeAt(0);const n=(0,f.lE)(p(r));for(let t=0;t<40;t+=2)n[t>>1]>>4>=8&&(e[t]=e[t].toUpperCase()),(15&n[t>>1])>=8&&(e[t+1]=e[t+1].toUpperCase());return"0x"+e.join("")}const I={};for(let t=0;t<10;t++)I[String(t)]=String(t);for(let t=0;t<26;t++)I[String.fromCharCode(65+t)]=String(10+t);const P=Math.floor((x=9007199254740991,Math.log10?Math.log10(x):Math.log(x)/Math.LN10));var x;function C(t){let e=null;if("string"!=typeof t&&k.throwArgumentError("invalid address","address",t),t.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==t.substring(0,2)&&(t="0x"+t),e=N(t),t.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&e!==t&&k.throwArgumentError("bad address checksum","address",t);else if(t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(t.substring(2,4)!==function(t){let e=(t=(t=t.toUpperCase()).substring(4)+t.substring(0,2)+"00").split("").map((t=>I[t])).join("");for(;e.length>=P;){let t=e.substring(0,P);e=parseInt(t,10)%97+e.substring(t.length)}let r=String(98-parseInt(e,10)%97);for(;r.length<2;)r="0"+r;return r}(t)&&k.throwArgumentError("bad icap checksum","address",t),e=(0,u.g$)(t.substring(4));e.length<40;)e="0"+e;e=N("0x"+e)}else k.throwArgumentError("invalid address","address",t);return e}const _="hash/5.7.0";var R=r(12139);function B(t){return p((0,R.Y0)(t))}const T=new i.Yd(_),S=new Uint8Array(32);S.fill(0);const O=u.O$.from(-1),D=u.O$.from(0),F=u.O$.from(1),M=u.O$.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),L=(0,f.$m)(F.toHexString(),32),Y=(0,f.$m)(D.toHexString(),32),G={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},q=["name","version","chainId","verifyingContract","salt"];function U(t){return function(e){return"string"!=typeof e&&T.throwArgumentError(`invalid domain value for ${JSON.stringify(t)}`,`domain.${t}`,e),e}}const z={name:U("name"),version:U("version"),chainId:function(t){try{return u.O$.from(t).toString()}catch(t){}return T.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",t)},verifyingContract:function(t){try{return C(t).toLowerCase()}catch(t){}return T.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",t)},salt:function(t){try{const e=(0,f.lE)(t);if(32!==e.length)throw new Error("bad length");return(0,f.Dv)(e)}catch(t){}return T.throwArgumentError('invalid domain value "salt"',"domain.salt",t)}};function Q(t){{const e=t.match(/^(u?)int(\d*)$/);if(e){const r=""===e[1],n=parseInt(e[2]||"256");(n%8!=0||n>256||e[2]&&e[2]!==String(n))&&T.throwArgumentError("invalid numeric width","type",t);const i=M.mask(r?n-1:n),o=r?i.add(F).mul(O):D;return function(e){const r=u.O$.from(e);return(r.lt(o)||r.gt(i))&&T.throwArgumentError(`value out-of-bounds for ${t}`,"value",e),(0,f.$m)(r.toTwos(256).toHexString(),32)}}}{const e=t.match(/^bytes(\d+)$/);if(e){const r=parseInt(e[1]);return(0===r||r>32||e[1]!==String(r))&&T.throwArgumentError("invalid bytes width","type",t),function(e){return(0,f.lE)(e).length!==r&&T.throwArgumentError(`invalid length for ${t}`,"value",e),function(t){const e=(0,f.lE)(t),r=e.length%32;return r?(0,f.xs)([e,S.slice(r)]):(0,f.Dv)(e)}(e)}}}switch(t){case"address":return function(t){return(0,f.$m)(C(t),32)};case"bool":return function(t){return t?L:Y};case"bytes":return function(t){return p(t)};case"string":return function(t){return B(t)}}return null}function H(t,e){return`${t}(${e.map((({name:t,type:e})=>e+" "+t)).join(",")})`}class K{constructor(t){(0,n.zG)(this,"types",Object.freeze((0,n.p$)(t))),(0,n.zG)(this,"_encoderCache",{}),(0,n.zG)(this,"_types",{});const e={},r={},i={};Object.keys(t).forEach((t=>{e[t]={},r[t]=[],i[t]={}}));for(const n in t){const i={};t[n].forEach((o=>{i[o.name]&&T.throwArgumentError(`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(n)}`,"types",t),i[o.name]=!0;const s=o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];s===n&&T.throwArgumentError(`circular type reference to ${JSON.stringify(s)}`,"types",t),Q(s)||(r[s]||T.throwArgumentError(`unknown type ${JSON.stringify(s)}`,"types",t),r[s].push(n),e[n][s]=!0)}))}const o=Object.keys(r).filter((t=>0===r[t].length));0===o.length?T.throwArgumentError("missing primary type","types",t):o.length>1&&T.throwArgumentError(`ambiguous primary types or unused types: ${o.map((t=>JSON.stringify(t))).join(", ")}`,"types",t),(0,n.zG)(this,"primaryType",o[0]),function n(o,s){s[o]&&T.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`,"types",t),s[o]=!0,Object.keys(e[o]).forEach((t=>{r[t]&&(n(t,s),Object.keys(s).forEach((e=>{i[e][t]=!0})))})),delete s[o]}(this.primaryType,{});for(const e in i){const r=Object.keys(i[e]);r.sort(),this._types[e]=H(e,t[e])+r.map((e=>H(e,t[e]))).join("")}}getEncoder(t){let e=this._encoderCache[t];return e||(e=this._encoderCache[t]=this._getEncoder(t)),e}_getEncoder(t){{const e=Q(t);if(e)return e}const e=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(e){const t=e[1],r=this.getEncoder(t),n=parseInt(e[3]);return e=>{n>=0&&e.length!==n&&T.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",e);let i=e.map(r);return this._types[t]&&(i=i.map(p)),p((0,f.xs)(i))}}const r=this.types[t];if(r){const e=B(this._types[t]);return t=>{const n=r.map((({name:e,type:r})=>{const n=this.getEncoder(r)(t[e]);return this._types[r]?p(n):n}));return n.unshift(e),(0,f.xs)(n)}}return T.throwArgumentError(`unknown type: ${t}`,"type",t)}encodeType(t){const e=this._types[t];return e||T.throwArgumentError(`unknown type: ${JSON.stringify(t)}`,"name",t),e}encodeData(t,e){return this.getEncoder(t)(e)}hashStruct(t,e){return p(this.encodeData(t,e))}encode(t){return this.encodeData(this.primaryType,t)}hash(t){return this.hashStruct(this.primaryType,t)}_visit(t,e,r){if(Q(t))return r(t,e);const n=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(n){const t=n[1],i=parseInt(n[3]);return i>=0&&e.length!==i&&T.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",e),e.map((e=>this._visit(t,e,r)))}const i=this.types[t];return i?i.reduce(((t,{name:n,type:i})=>(t[n]=this._visit(i,e[n],r),t)),{}):T.throwArgumentError(`unknown type: ${t}`,"type",t)}visit(t,e){return this._visit(this.primaryType,t,e)}static from(t){return new K(t)}static getPrimaryType(t){return K.from(t).primaryType}static hashStruct(t,e,r){return K.from(e).hashStruct(t,r)}static hashDomain(t){const e=[];for(const r in t){const n=G[r];n||T.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(r)}`,"domain",t),e.push({name:r,type:n})}return e.sort(((t,e)=>q.indexOf(t.name)-q.indexOf(e.name))),K.hashStruct("EIP712Domain",{EIP712Domain:e},t)}static encode(t,e,r){return(0,f.xs)(["0x1901",K.hashDomain(t),K.from(e).hash(r)])}static hash(t,e,r){return p(K.encode(t,e,r))}static resolveNames(t,e,r,i){return o=this,s=void 0,c=function*(){t=(0,n.DC)(t);const o={};t.verifyingContract&&!(0,f.A7)(t.verifyingContract,20)&&(o[t.verifyingContract]="0x");const s=K.from(e);s.visit(r,((t,e)=>("address"!==t||(0,f.A7)(e,20)||(o[e]="0x"),e)));for(const t in o)o[t]=yield i(t);return t.verifyingContract&&o[t.verifyingContract]&&(t.verifyingContract=o[t.verifyingContract]),r=s.visit(r,((t,e)=>"address"===t&&o[e]?o[e]:e)),{domain:t,value:r}},new((a=void 0)||(a=Promise))((function(t,e){function r(t){try{i(c.next(t))}catch(t){e(t)}}function n(t){try{i(c.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof a?i:new a((function(t){t(i)}))).then(r,n)}i((c=c.apply(o,s||[])).next())}));var o,s,a,c}static getPayload(t,e,r){K.hashDomain(t);const i={},o=[];q.forEach((e=>{const r=t[e];null!=r&&(i[e]=z[e](r),o.push({name:e,type:G[e]}))}));const s=K.from(e),a=(0,n.DC)(e);return a.EIP712Domain?T.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",e):a.EIP712Domain=o,s.encode(r),{types:a,domain:i,primaryType:s.primaryType,message:s.visit(r,((t,e)=>{if(t.match(/^bytes(\d*)/))return(0,f.Dv)((0,f.lE)(e));if(t.match(/^u?int/))return u.O$.from(e).toString();switch(t){case"address":return e.toLowerCase();case"bool":return!!e;case"string":return"string"!=typeof e&&T.throwArgumentError("invalid string","value",e),e}return T.throwArgumentError("unsupported type","type",t)}))}}}const J=u.O$.from(0);var j=r(13550),X=r.n(j),V=r(33715),W=r.n(V);function Z(t,e,r){return r={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&r.path)}},t(r,r.exports),r.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:"undefined"!=typeof self&&self;var $=tt;function tt(t,e){if(!t)throw new Error(e||"Assertion failed")}tt.equal=function(t,e,r){if(t!=e)throw new Error(r||"Assertion failed: "+t+" != "+e)};var et=Z((function(t,e){var r=e;function n(t){return 1===t.length?"0"+t:t}function i(t){for(var e="",r=0;r<t.length;r++)e+=n(t[r].toString(16));return e}r.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"!=typeof t){for(var n=0;n<t.length;n++)r[n]=0|t[n];return r}if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),n=0;n<t.length;n+=2)r.push(parseInt(t[n]+t[n+1],16));else for(n=0;n<t.length;n++){var i=t.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s)}return r},r.zero2=n,r.toHex=i,r.encode=function(t,e){return"hex"===e?i(t):t}})),rt=Z((function(t,e){var r=e;r.assert=$,r.toArray=et.toArray,r.zero2=et.zero2,r.toHex=et.toHex,r.encode=et.encode,r.getNAF=function(t,e,r){var n=new Array(Math.max(t.bitLength(),r)+1);n.fill(0);for(var i=1<<e+1,o=t.clone(),s=0;s<n.length;s++){var a,c=o.andln(i-1);o.isOdd()?(a=c>(i>>1)-1?(i>>1)-c:c,o.isubn(a)):a=0,n[s]=a,o.iushrn(1)}return n},r.getJSF=function(t,e){var r=[[],[]];t=t.clone(),e=e.clone();for(var n,i=0,o=0;t.cmpn(-i)>0||e.cmpn(-o)>0;){var s,a,c=t.andln(3)+i&3,l=e.andln(3)+o&3;3===c&&(c=-1),3===l&&(l=-1),s=0==(1&c)?0:3!=(n=t.andln(7)+i&7)&&5!==n||2!==l?c:-c,r[0].push(s),a=0==(1&l)?0:3!=(n=e.andln(7)+o&7)&&5!==n||2!==c?l:-l,r[1].push(a),2*i===s+1&&(i=1-i),2*o===a+1&&(o=1-o),t.iushrn(1),e.iushrn(1)}return r},r.cachedProperty=function(t,e,r){var n="_"+e;t.prototype[e]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},r.parseBytes=function(t){return"string"==typeof t?r.toArray(t,"hex"):t},r.intFromLE=function(t){return new(X())(t,"hex","le")}})),nt=rt.getNAF,it=rt.getJSF,ot=rt.assert;function st(t,e){this.type=t,this.p=new(X())(e.p,16),this.red=e.prime?X().red(e.prime):X().mont(this.p),this.zero=new(X())(0).toRed(this.red),this.one=new(X())(1).toRed(this.red),this.two=new(X())(2).toRed(this.red),this.n=e.n&&new(X())(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var at=st;function ct(t,e){this.curve=t,this.type=e,this.precomputed=null}st.prototype.point=function(){throw new Error("Not implemented")},st.prototype.validate=function(){throw new Error("Not implemented")},st.prototype._fixedNafMul=function(t,e){ot(t.precomputed);var r=t._getDoubles(),n=nt(e,1,this._bitLength),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;var o,s,a=[];for(o=0;o<n.length;o+=r.step){s=0;for(var c=o+r.step-1;c>=o;c--)s=(s<<1)+n[c];a.push(s)}for(var l=this.jpoint(null,null,null),u=this.jpoint(null,null,null),f=i;f>0;f--){for(o=0;o<a.length;o++)(s=a[o])===f?u=u.mixedAdd(r.points[o]):s===-f&&(u=u.mixedAdd(r.points[o].neg()));l=l.add(u)}return l.toP()},st.prototype._wnafMul=function(t,e){var r=4,n=t._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=nt(e,r,this._bitLength),s=this.jpoint(null,null,null),a=o.length-1;a>=0;a--){for(var c=0;a>=0&&0===o[a];a--)c++;if(a>=0&&c++,s=s.dblp(c),a<0)break;var l=o[a];ot(0!==l),s="affine"===t.type?l>0?s.mixedAdd(i[l-1>>1]):s.mixedAdd(i[-l-1>>1].neg()):l>0?s.add(i[l-1>>1]):s.add(i[-l-1>>1].neg())}return"affine"===t.type?s.toP():s},st.prototype._wnafMulAdd=function(t,e,r,n,i){var o,s,a,c=this._wnafT1,l=this._wnafT2,u=this._wnafT3,f=0;for(o=0;o<n;o++){var d=(a=e[o])._getNAFPoints(t);c[o]=d.wnd,l[o]=d.points}for(o=n-1;o>=1;o-=2){var h=o-1,p=o;if(1===c[h]&&1===c[p]){var m=[e[h],null,null,e[p]];0===e[h].y.cmp(e[p].y)?(m[1]=e[h].add(e[p]),m[2]=e[h].toJ().mixedAdd(e[p].neg())):0===e[h].y.cmp(e[p].y.redNeg())?(m[1]=e[h].toJ().mixedAdd(e[p]),m[2]=e[h].add(e[p].neg())):(m[1]=e[h].toJ().mixedAdd(e[p]),m[2]=e[h].toJ().mixedAdd(e[p].neg()));var g=[-3,-1,-5,-7,0,7,5,1,3],A=it(r[h],r[p]);for(f=Math.max(A[0].length,f),u[h]=new Array(f),u[p]=new Array(f),s=0;s<f;s++){var v=0|A[0][s],y=0|A[1][s];u[h][s]=g[3*(v+1)+(y+1)],u[p][s]=0,l[h]=m}}else u[h]=nt(r[h],c[h],this._bitLength),u[p]=nt(r[p],c[p],this._bitLength),f=Math.max(u[h].length,f),f=Math.max(u[p].length,f)}var b=this.jpoint(null,null,null),w=this._wnafT4;for(o=f;o>=0;o--){for(var E=0;o>=0;){var k=!0;for(s=0;s<n;s++)w[s]=0|u[s][o],0!==w[s]&&(k=!1);if(!k)break;E++,o--}if(o>=0&&E++,b=b.dblp(E),o<0)break;for(s=0;s<n;s++){var N=w[s];0!==N&&(N>0?a=l[s][N-1>>1]:N<0&&(a=l[s][-N-1>>1].neg()),b="affine"===a.type?b.mixedAdd(a):b.add(a))}}for(o=0;o<n;o++)l[o]=null;return i?b:b.toP()},st.BasePoint=ct,ct.prototype.eq=function(){throw new Error("Not implemented")},ct.prototype.validate=function(){return this.curve.validate(this)},st.prototype.decodePoint=function(t,e){t=rt.toArray(t,e);var r=this.p.byteLength();if((4===t[0]||6===t[0]||7===t[0])&&t.length-1==2*r)return 6===t[0]?ot(t[t.length-1]%2==0):7===t[0]&&ot(t[t.length-1]%2==1),this.point(t.slice(1,1+r),t.slice(1+r,1+2*r));if((2===t[0]||3===t[0])&&t.length-1===r)return this.pointFromX(t.slice(1,1+r),3===t[0]);throw new Error("Unknown point format")},ct.prototype.encodeCompressed=function(t){return this.encode(t,!0)},ct.prototype._encode=function(t){var e=this.curve.p.byteLength(),r=this.getX().toArray("be",e);return t?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",e))},ct.prototype.encode=function(t,e){return rt.encode(this._encode(e),t)},ct.prototype.precompute=function(t){if(this.precomputed)return this;var e={doubles:null,naf:null,beta:null};return e.naf=this._getNAFPoints(8),e.doubles=this._getDoubles(4,t),e.beta=this._getBeta(),this.precomputed=e,this},ct.prototype._hasDoubles=function(t){if(!this.precomputed)return!1;var e=this.precomputed.doubles;return!!e&&e.points.length>=Math.ceil((t.bitLength()+1)/e.step)},ct.prototype._getDoubles=function(t,e){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<e;i+=t){for(var o=0;o<t;o++)n=n.dbl();r.push(n)}return{step:t,points:r}},ct.prototype._getNAFPoints=function(t){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var e=[this],r=(1<<t)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)e[i]=e[i-1].add(n);return{wnd:t,points:e}},ct.prototype._getBeta=function(){return null},ct.prototype.dblp=function(t){for(var e=this,r=0;r<t;r++)e=e.dbl();return e};var lt=Z((function(t){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}})),ut=rt.assert;function ft(t){at.call(this,"short",t),this.a=new(X())(t.a,16).toRed(this.red),this.b=new(X())(t.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(t),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}lt(ft,at);var dt=ft;function ht(t,e,r,n){at.BasePoint.call(this,t,"affine"),null===e&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new(X())(e,16),this.y=new(X())(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function pt(t,e,r,n){at.BasePoint.call(this,t,"jacobian"),null===e&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(X())(0)):(this.x=new(X())(e,16),this.y=new(X())(r,16),this.z=new(X())(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}ft.prototype._getEndomorphism=function(t){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var e,r;if(t.beta)e=new(X())(t.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);e=(e=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(t.lambda)r=new(X())(t.lambda,16);else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(e))?r=i[0]:(r=i[1],ut(0===this.g.mul(r).x.cmp(this.g.x.redMul(e))))}return{beta:e,lambda:r,basis:t.basis?t.basis.map((function(t){return{a:new(X())(t.a,16),b:new(X())(t.b,16)}})):this._getEndoBasis(r)}}},ft.prototype._getEndoRoots=function(t){var e=t===this.p?this.red:X().mont(t),r=new(X())(2).toRed(e).redInvm(),n=r.redNeg(),i=new(X())(3).toRed(e).redNeg().redSqrt().redMul(r);return[n.redAdd(i).fromRed(),n.redSub(i).fromRed()]},ft.prototype._getEndoBasis=function(t){for(var e,r,n,i,o,s,a,c,l,u=this.n.ushrn(Math.floor(this.n.bitLength()/2)),f=t,d=this.n.clone(),h=new(X())(1),p=new(X())(0),m=new(X())(0),g=new(X())(1),A=0;0!==f.cmpn(0);){var v=d.div(f);c=d.sub(v.mul(f)),l=m.sub(v.mul(h));var y=g.sub(v.mul(p));if(!n&&c.cmp(u)<0)e=a.neg(),r=h,n=c.neg(),i=l;else if(n&&2==++A)break;a=c,d=f,f=c,m=h,h=l,g=p,p=y}o=c.neg(),s=l;var b=n.sqr().add(i.sqr());return o.sqr().add(s.sqr()).cmp(b)>=0&&(o=e,s=r),n.negative&&(n=n.neg(),i=i.neg()),o.negative&&(o=o.neg(),s=s.neg()),[{a:n,b:i},{a:o,b:s}]},ft.prototype._endoSplit=function(t){var e=this.endo.basis,r=e[0],n=e[1],i=n.b.mul(t).divRound(this.n),o=r.b.neg().mul(t).divRound(this.n),s=i.mul(r.a),a=o.mul(n.a),c=i.mul(r.b),l=o.mul(n.b);return{k1:t.sub(s).sub(a),k2:c.add(l).neg()}},ft.prototype.pointFromX=function(t,e){(t=new(X())(t,16)).red||(t=t.toRed(this.red));var r=t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var i=n.fromRed().isOdd();return(e&&!i||!e&&i)&&(n=n.redNeg()),this.point(t,n)},ft.prototype.validate=function(t){if(t.inf)return!0;var e=t.x,r=t.y,n=this.a.redMul(e),i=e.redSqr().redMul(e).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},ft.prototype._endoWnafMulAdd=function(t,e,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<t.length;o++){var s=this._endoSplit(e[o]),a=t[o],c=a._getBeta();s.k1.negative&&(s.k1.ineg(),a=a.neg(!0)),s.k2.negative&&(s.k2.ineg(),c=c.neg(!0)),n[2*o]=a,n[2*o+1]=c,i[2*o]=s.k1,i[2*o+1]=s.k2}for(var l=this._wnafMulAdd(1,n,i,2*o,r),u=0;u<2*o;u++)n[u]=null,i[u]=null;return l},lt(ht,at.BasePoint),ft.prototype.point=function(t,e,r){return new ht(this,t,e,r)},ft.prototype.pointFromJSON=function(t,e){return ht.fromJSON(this,t,e)},ht.prototype._getBeta=function(){if(this.curve.endo){var t=this.precomputed;if(t&&t.beta)return t.beta;var e=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(t){var r=this.curve,n=function(t){return r.point(t.x.redMul(r.endo.beta),t.y)};t.beta=e,e.precomputed={beta:null,naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(n)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(n)}}}return e}},ht.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},ht.fromJSON=function(t,e,r){"string"==typeof e&&(e=JSON.parse(e));var n=t.point(e[0],e[1],r);if(!e[2])return n;function i(e){return t.point(e[0],e[1],r)}var o=e[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},ht.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},ht.prototype.isInfinity=function(){return this.inf},ht.prototype.add=function(t){if(this.inf)return t;if(t.inf)return this;if(this.eq(t))return this.dbl();if(this.neg().eq(t))return this.curve.point(null,null);if(0===this.x.cmp(t.x))return this.curve.point(null,null);var e=this.y.redSub(t.y);0!==e.cmpn(0)&&(e=e.redMul(this.x.redSub(t.x).redInvm()));var r=e.redSqr().redISub(this.x).redISub(t.x),n=e.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},ht.prototype.dbl=function(){if(this.inf)return this;var t=this.y.redAdd(this.y);if(0===t.cmpn(0))return this.curve.point(null,null);var e=this.curve.a,r=this.x.redSqr(),n=t.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(e).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),s=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,s)},ht.prototype.getX=function(){return this.x.fromRed()},ht.prototype.getY=function(){return this.y.fromRed()},ht.prototype.mul=function(t){return t=new(X())(t,16),this.isInfinity()?this:this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve.endo?this.curve._endoWnafMulAdd([this],[t]):this.curve._wnafMul(this,t)},ht.prototype.mulAdd=function(t,e,r){var n=[this,e],i=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},ht.prototype.jmulAdd=function(t,e,r){var n=[this,e],i=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},ht.prototype.eq=function(t){return this===t||this.inf===t.inf&&(this.inf||0===this.x.cmp(t.x)&&0===this.y.cmp(t.y))},ht.prototype.neg=function(t){if(this.inf)return this;var e=this.curve.point(this.x,this.y.redNeg());if(t&&this.precomputed){var r=this.precomputed,n=function(t){return t.neg()};e.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return e},ht.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},lt(pt,at.BasePoint),ft.prototype.jpoint=function(t,e,r){return new pt(this,t,e,r)},pt.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var t=this.z.redInvm(),e=t.redSqr(),r=this.x.redMul(e),n=this.y.redMul(e).redMul(t);return this.curve.point(r,n)},pt.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},pt.prototype.add=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(e),i=t.x.redMul(r),o=this.y.redMul(e.redMul(t.z)),s=t.y.redMul(r.redMul(this.z)),a=n.redSub(i),c=o.redSub(s);if(0===a.cmpn(0))return 0!==c.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var l=a.redSqr(),u=l.redMul(a),f=n.redMul(l),d=c.redSqr().redIAdd(u).redISub(f).redISub(f),h=c.redMul(f.redISub(d)).redISub(o.redMul(u)),p=this.z.redMul(t.z).redMul(a);return this.curve.jpoint(d,h,p)},pt.prototype.mixedAdd=function(t){if(this.isInfinity())return t.toJ();if(t.isInfinity())return this;var e=this.z.redSqr(),r=this.x,n=t.x.redMul(e),i=this.y,o=t.y.redMul(e).redMul(this.z),s=r.redSub(n),a=i.redSub(o);if(0===s.cmpn(0))return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=s.redSqr(),l=c.redMul(s),u=r.redMul(c),f=a.redSqr().redIAdd(l).redISub(u).redISub(u),d=a.redMul(u.redISub(f)).redISub(i.redMul(l)),h=this.z.redMul(s);return this.curve.jpoint(f,d,h)},pt.prototype.dblp=function(t){if(0===t)return this;if(this.isInfinity())return this;if(!t)return this.dbl();var e;if(this.curve.zeroA||this.curve.threeA){var r=this;for(e=0;e<t;e++)r=r.dbl();return r}var n=this.curve.a,i=this.curve.tinv,o=this.x,s=this.y,a=this.z,c=a.redSqr().redSqr(),l=s.redAdd(s);for(e=0;e<t;e++){var u=o.redSqr(),f=l.redSqr(),d=f.redSqr(),h=u.redAdd(u).redIAdd(u).redIAdd(n.redMul(c)),p=o.redMul(f),m=h.redSqr().redISub(p.redAdd(p)),g=p.redISub(m),A=h.redMul(g);A=A.redIAdd(A).redISub(d);var v=l.redMul(a);e+1<t&&(c=c.redMul(d)),o=m,a=v,l=A}return this.curve.jpoint(o,l.redMul(i),a)},pt.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},pt.prototype._zeroDbl=function(){var t,e,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n),c=a.redSqr().redISub(s).redISub(s),l=o.redIAdd(o);l=(l=l.redIAdd(l)).redIAdd(l),t=c,e=a.redMul(s.redISub(c)).redISub(l),r=this.y.redAdd(this.y)}else{var u=this.x.redSqr(),f=this.y.redSqr(),d=f.redSqr(),h=this.x.redAdd(f).redSqr().redISub(u).redISub(d);h=h.redIAdd(h);var p=u.redAdd(u).redIAdd(u),m=p.redSqr(),g=d.redIAdd(d);g=(g=g.redIAdd(g)).redIAdd(g),t=m.redISub(h).redISub(h),e=p.redMul(h.redISub(t)).redISub(g),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(t,e,r)},pt.prototype._threeDbl=function(){var t,e,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),c=a.redSqr().redISub(s).redISub(s);t=c;var l=o.redIAdd(o);l=(l=l.redIAdd(l)).redIAdd(l),e=a.redMul(s.redISub(c)).redISub(l),r=this.y.redAdd(this.y)}else{var u=this.z.redSqr(),f=this.y.redSqr(),d=this.x.redMul(f),h=this.x.redSub(u).redMul(this.x.redAdd(u));h=h.redAdd(h).redIAdd(h);var p=d.redIAdd(d),m=(p=p.redIAdd(p)).redAdd(p);t=h.redSqr().redISub(m),r=this.y.redAdd(this.z).redSqr().redISub(f).redISub(u);var g=f.redSqr();g=(g=(g=g.redIAdd(g)).redIAdd(g)).redIAdd(g),e=h.redMul(p.redISub(t)).redISub(g)}return this.curve.jpoint(t,e,r)},pt.prototype._dbl=function(){var t=this.curve.a,e=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=e.redSqr(),s=r.redSqr(),a=o.redAdd(o).redIAdd(o).redIAdd(t.redMul(i)),c=e.redAdd(e),l=(c=c.redIAdd(c)).redMul(s),u=a.redSqr().redISub(l.redAdd(l)),f=l.redISub(u),d=s.redSqr();d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var h=a.redMul(f).redISub(d),p=r.redAdd(r).redMul(n);return this.curve.jpoint(u,h,p)},pt.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var t=this.x.redSqr(),e=this.y.redSqr(),r=this.z.redSqr(),n=e.redSqr(),i=t.redAdd(t).redIAdd(t),o=i.redSqr(),s=this.x.redAdd(e).redSqr().redISub(t).redISub(n),a=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),c=n.redIAdd(n);c=(c=(c=c.redIAdd(c)).redIAdd(c)).redIAdd(c);var l=i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(c),u=e.redMul(l);u=(u=u.redIAdd(u)).redIAdd(u);var f=this.x.redMul(a).redISub(u);f=(f=f.redIAdd(f)).redIAdd(f);var d=this.y.redMul(l.redMul(c.redISub(l)).redISub(s.redMul(a)));d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var h=this.z.redAdd(s).redSqr().redISub(r).redISub(a);return this.curve.jpoint(f,d,h)},pt.prototype.mul=function(t,e){return t=new(X())(t,e),this.curve._wnafMul(this,t)},pt.prototype.eq=function(t){if("affine"===t.type)return this.eq(t.toJ());if(this===t)return!0;var e=this.z.redSqr(),r=t.z.redSqr();if(0!==this.x.redMul(r).redISub(t.x.redMul(e)).cmpn(0))return!1;var n=e.redMul(this.z),i=r.redMul(t.z);return 0===this.y.redMul(i).redISub(t.y.redMul(n)).cmpn(0)},pt.prototype.eqXToP=function(t){var e=this.z.redSqr(),r=t.toRed(this.curve.red).redMul(e);if(0===this.x.cmp(r))return!0;for(var n=t.clone(),i=this.curve.redN.redMul(e);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},pt.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},pt.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var mt=Z((function(t,e){var r=e;r.base=at,r.short=dt,r.mont=null,r.edwards=null})),gt=Z((function(t,e){var r,n=e,i=rt.assert;function o(t){"short"===t.type?this.curve=new mt.short(t):"edwards"===t.type?this.curve=new mt.edwards(t):this.curve=new mt.mont(t),this.g=this.curve.g,this.n=this.curve.n,this.hash=t.hash,i(this.g.validate(),"Invalid curve"),i(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function s(t,e){Object.defineProperty(n,t,{configurable:!0,enumerable:!0,get:function(){var r=new o(e);return Object.defineProperty(n,t,{configurable:!0,enumerable:!0,value:r}),r}})}n.PresetCurve=o,s("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:W().sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),s("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:W().sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),s("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:W().sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),s("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:W().sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),s("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:W().sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),s("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:W().sha256,gRed:!1,g:["9"]}),s("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:W().sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{r=null.crash()}catch(t){r=void 0}s("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:W().sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",r]})}));function At(t){if(!(this instanceof At))return new At(t);this.hash=t.hash,this.predResist=!!t.predResist,this.outLen=this.hash.outSize,this.minEntropy=t.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=et.toArray(t.entropy,t.entropyEnc||"hex"),r=et.toArray(t.nonce,t.nonceEnc||"hex"),n=et.toArray(t.pers,t.persEnc||"hex");$(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,r,n)}var vt=At;At.prototype._init=function(t,e,r){var n=t.concat(e).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},At.prototype._hmac=function(){return new(W().hmac)(this.hash,this.K)},At.prototype._update=function(t){var e=this._hmac().update(this.V).update([0]);t&&(e=e.update(t)),this.K=e.digest(),this.V=this._hmac().update(this.V).digest(),t&&(this.K=this._hmac().update(this.V).update([1]).update(t).digest(),this.V=this._hmac().update(this.V).digest())},At.prototype.reseed=function(t,e,r,n){"string"!=typeof e&&(n=r,r=e,e=null),t=et.toArray(t,e),r=et.toArray(r,n),$(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(t.concat(r||[])),this._reseed=1},At.prototype.generate=function(t,e,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof e&&(n=r,r=e,e=null),r&&(r=et.toArray(r,n||"hex"),this._update(r));for(var i=[];i.length<t;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var o=i.slice(0,t);return this._update(r),this._reseed++,et.encode(o,e)};var yt=rt.assert;function bt(t,e){this.ec=t,this.priv=null,this.pub=null,e.priv&&this._importPrivate(e.priv,e.privEnc),e.pub&&this._importPublic(e.pub,e.pubEnc)}var wt=bt;bt.fromPublic=function(t,e,r){return e instanceof bt?e:new bt(t,{pub:e,pubEnc:r})},bt.fromPrivate=function(t,e,r){return e instanceof bt?e:new bt(t,{priv:e,privEnc:r})},bt.prototype.validate=function(){var t=this.getPublic();return t.isInfinity()?{result:!1,reason:"Invalid public key"}:t.validate()?t.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},bt.prototype.getPublic=function(t,e){return"string"==typeof t&&(e=t,t=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),e?this.pub.encode(e,t):this.pub},bt.prototype.getPrivate=function(t){return"hex"===t?this.priv.toString(16,2):this.priv},bt.prototype._importPrivate=function(t,e){this.priv=new(X())(t,e||16),this.priv=this.priv.umod(this.ec.curve.n)},bt.prototype._importPublic=function(t,e){if(t.x||t.y)return"mont"===this.ec.curve.type?yt(t.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||yt(t.x&&t.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(t.x,t.y));this.pub=this.ec.curve.decodePoint(t,e)},bt.prototype.derive=function(t){return t.validate()||yt(t.validate(),"public point not validated"),t.mul(this.priv).getX()},bt.prototype.sign=function(t,e,r){return this.ec.sign(t,this,e,r)},bt.prototype.verify=function(t,e){return this.ec.verify(t,e,this)},bt.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var Et=rt.assert;function kt(t,e){if(t instanceof kt)return t;this._importDER(t,e)||(Et(t.r&&t.s,"Signature without r or s"),this.r=new(X())(t.r,16),this.s=new(X())(t.s,16),void 0===t.recoveryParam?this.recoveryParam=null:this.recoveryParam=t.recoveryParam)}var Nt=kt;function It(){this.place=0}function Pt(t,e){var r=t[e.place++];if(!(128&r))return r;var n=15&r;if(0===n||n>4)return!1;for(var i=0,o=0,s=e.place;o<n;o++,s++)i<<=8,i|=t[s],i>>>=0;return!(i<=127)&&(e.place=s,i)}function xt(t){for(var e=0,r=t.length-1;!t[e]&&!(128&t[e+1])&&e<r;)e++;return 0===e?t:t.slice(e)}function Ct(t,e){if(e<128)t.push(e);else{var r=1+(Math.log(e)/Math.LN2>>>3);for(t.push(128|r);--r;)t.push(e>>>(r<<3)&255);t.push(e)}}kt.prototype._importDER=function(t,e){t=rt.toArray(t,e);var r=new It;if(48!==t[r.place++])return!1;var n=Pt(t,r);if(!1===n)return!1;if(n+r.place!==t.length)return!1;if(2!==t[r.place++])return!1;var i=Pt(t,r);if(!1===i)return!1;var o=t.slice(r.place,i+r.place);if(r.place+=i,2!==t[r.place++])return!1;var s=Pt(t,r);if(!1===s)return!1;if(t.length!==s+r.place)return!1;var a=t.slice(r.place,s+r.place);if(0===o[0]){if(!(128&o[1]))return!1;o=o.slice(1)}if(0===a[0]){if(!(128&a[1]))return!1;a=a.slice(1)}return this.r=new(X())(o),this.s=new(X())(a),this.recoveryParam=null,!0},kt.prototype.toDER=function(t){var e=this.r.toArray(),r=this.s.toArray();for(128&e[0]&&(e=[0].concat(e)),128&r[0]&&(r=[0].concat(r)),e=xt(e),r=xt(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];Ct(n,e.length),(n=n.concat(e)).push(2),Ct(n,r.length);var i=n.concat(r),o=[48];return Ct(o,i.length),o=o.concat(i),rt.encode(o,t)};var _t=function(){throw new Error("unsupported")},Rt=rt.assert;function Bt(t){if(!(this instanceof Bt))return new Bt(t);"string"==typeof t&&(Rt(Object.prototype.hasOwnProperty.call(gt,t),"Unknown curve "+t),t=gt[t]),t instanceof gt.PresetCurve&&(t={curve:t}),this.curve=t.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=t.curve.g,this.g.precompute(t.curve.n.bitLength()+1),this.hash=t.hash||t.curve.hash}var Tt=Bt;Bt.prototype.keyPair=function(t){return new wt(this,t)},Bt.prototype.keyFromPrivate=function(t,e){return wt.fromPrivate(this,t,e)},Bt.prototype.keyFromPublic=function(t,e){return wt.fromPublic(this,t,e)},Bt.prototype.genKeyPair=function(t){t||(t={});for(var e=new vt({hash:this.hash,pers:t.pers,persEnc:t.persEnc||"utf8",entropy:t.entropy||_t(this.hash.hmacStrength),entropyEnc:t.entropy&&t.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),n=this.n.sub(new(X())(2));;){var i=new(X())(e.generate(r));if(!(i.cmp(n)>0))return i.iaddn(1),this.keyFromPrivate(i)}},Bt.prototype._truncateToN=function(t,e){var r=8*t.byteLength()-this.n.bitLength();return r>0&&(t=t.ushrn(r)),!e&&t.cmp(this.n)>=0?t.sub(this.n):t},Bt.prototype.sign=function(t,e,r,n){"object"==typeof r&&(n=r,r=null),n||(n={}),e=this.keyFromPrivate(e,r),t=this._truncateToN(new(X())(t,16));for(var i=this.n.byteLength(),o=e.getPrivate().toArray("be",i),s=t.toArray("be",i),a=new vt({hash:this.hash,entropy:o,nonce:s,pers:n.pers,persEnc:n.persEnc||"utf8"}),c=this.n.sub(new(X())(1)),l=0;;l++){var u=n.k?n.k(l):new(X())(a.generate(this.n.byteLength()));if(!((u=this._truncateToN(u,!0)).cmpn(1)<=0||u.cmp(c)>=0)){var f=this.g.mul(u);if(!f.isInfinity()){var d=f.getX(),h=d.umod(this.n);if(0!==h.cmpn(0)){var p=u.invm(this.n).mul(h.mul(e.getPrivate()).iadd(t));if(0!==(p=p.umod(this.n)).cmpn(0)){var m=(f.getY().isOdd()?1:0)|(0!==d.cmp(h)?2:0);return n.canonical&&p.cmp(this.nh)>0&&(p=this.n.sub(p),m^=1),new Nt({r:h,s:p,recoveryParam:m})}}}}}},Bt.prototype.verify=function(t,e,r,n){t=this._truncateToN(new(X())(t,16)),r=this.keyFromPublic(r,n);var i=(e=new Nt(e,"hex")).r,o=e.s;if(i.cmpn(1)<0||i.cmp(this.n)>=0)return!1;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;var s,a=o.invm(this.n),c=a.mul(t).umod(this.n),l=a.mul(i).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(c,r.getPublic(),l)).isInfinity()&&s.eqXToP(i):!(s=this.g.mulAdd(c,r.getPublic(),l)).isInfinity()&&0===s.getX().umod(this.n).cmp(i)},Bt.prototype.recoverPubKey=function(t,e,r,n){Rt((3&r)===r,"The recovery param is more than two bits"),e=new Nt(e,n);var i=this.n,o=new(X())(t),s=e.r,a=e.s,c=1&r,l=r>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&l)throw new Error("Unable to find sencond key candinate");s=l?this.curve.pointFromX(s.add(this.curve.n),c):this.curve.pointFromX(s,c);var u=e.r.invm(i),f=i.sub(o).mul(u).umod(i),d=a.mul(u).umod(i);return this.g.mulAdd(f,s,d)},Bt.prototype.getKeyRecoveryParam=function(t,e,r,n){if(null!==(e=new Nt(e,n)).recoveryParam)return e.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(t,e,i)}catch(t){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")};var St=Z((function(t,e){var r=e;r.version="6.5.4",r.utils=rt,r.rand=function(){throw new Error("unsupported")},r.curve=mt,r.curves=gt,r.ec=Tt,r.eddsa=null})).ec;const Ot=new i.Yd("signing-key/5.7.0");let Dt=null;function Ft(){return Dt||(Dt=new St("secp256k1")),Dt}class Mt{constructor(t){(0,n.zG)(this,"curve","secp256k1"),(0,n.zG)(this,"privateKey",(0,f.Dv)(t)),32!==(0,f.E1)(this.privateKey)&&Ot.throwArgumentError("invalid private key","privateKey","[[ REDACTED ]]");const e=Ft().keyFromPrivate((0,f.lE)(this.privateKey));(0,n.zG)(this,"publicKey","0x"+e.getPublic(!1,"hex")),(0,n.zG)(this,"compressedPublicKey","0x"+e.getPublic(!0,"hex")),(0,n.zG)(this,"_isSigningKey",!0)}_addPoint(t){const e=Ft().keyFromPublic((0,f.lE)(this.publicKey)),r=Ft().keyFromPublic((0,f.lE)(t));return"0x"+e.pub.add(r.pub).encodeCompressed("hex")}signDigest(t){const e=Ft().keyFromPrivate((0,f.lE)(this.privateKey)),r=(0,f.lE)(t);32!==r.length&&Ot.throwArgumentError("bad digest length","digest",t);const n=e.sign(r,{canonical:!0});return(0,f.N)({recoveryParam:n.recoveryParam,r:(0,f.$m)("0x"+n.r.toString(16),32),s:(0,f.$m)("0x"+n.s.toString(16),32)})}computeSharedSecret(t){const e=Ft().keyFromPrivate((0,f.lE)(this.privateKey)),r=Ft().keyFromPublic((0,f.lE)(Lt(t)));return(0,f.$m)("0x"+e.derive(r.getPublic()).toString(16),32)}static isSigningKey(t){return!(!t||!t._isSigningKey)}}function Lt(t,e){const r=(0,f.lE)(t);if(32===r.length){const t=new Mt(r);return e?"0x"+Ft().keyFromPrivate(r).getPublic(!0,"hex"):t.publicKey}return 33===r.length?e?(0,f.Dv)(r):"0x"+Ft().keyFromPublic(r).getPublic(!1,"hex"):65===r.length?e?"0x"+Ft().keyFromPublic(r).getPublic(!0,"hex"):(0,f.Dv)(r):Ot.throwArgumentError("invalid public or private key","key","[REDACTED]")}const Yt=new i.Yd("transactions/5.7.0");var Gt;function qt(t){return"0x"===t?null:C(t)}function Ut(t){return"0x"===t?J:u.O$.from(t)}function zt(t,e){return function(t){const e=Lt(t);return C((0,f.p3)(p((0,f.p3)(e,1)),12))}(function(t,e){const r=(0,f.N)(e),n={r:(0,f.lE)(r.r),s:(0,f.lE)(r.s)};return"0x"+Ft().recoverPubKey((0,f.lE)(t),n,r.recoveryParam).encode("hex",!1)}((0,f.lE)(t),e))}function Qt(t,e){const r=(0,f.G1)(u.O$.from(t).toHexString());return r.length>32&&Yt.throwArgumentError("invalid length for "+e,"transaction:"+e,t),r}function Ht(t,e){return{address:C(t),storageKeys:(e||[]).map(((e,r)=>(32!==(0,f.E1)(e)&&Yt.throwArgumentError("invalid access list storageKey",`accessList[${t}:${r}]`,e),e.toLowerCase())))}}function Kt(t){if(Array.isArray(t))return t.map(((t,e)=>Array.isArray(t)?(t.length>2&&Yt.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${e}]`,t),Ht(t[0],t[1])):Ht(t.address,t.storageKeys)));const e=Object.keys(t).map((e=>{const r=t[e].reduce(((t,e)=>(t[e]=!0,t)),{});return Ht(e,Object.keys(r).sort())}));return e.sort(((t,e)=>t.address.localeCompare(e.address))),e}function Jt(t){return Kt(t).map((t=>[t.address,t.storageKeys]))}function jt(t,e){if(null!=t.gasPrice){const e=u.O$.from(t.gasPrice),r=u.O$.from(t.maxFeePerGas||0);e.eq(r)||Yt.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:e,maxFeePerGas:r})}const r=[Qt(t.chainId||0,"chainId"),Qt(t.nonce||0,"nonce"),Qt(t.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),Qt(t.maxFeePerGas||0,"maxFeePerGas"),Qt(t.gasLimit||0,"gasLimit"),null!=t.to?C(t.to):"0x",Qt(t.value||0,"value"),t.data||"0x",Jt(t.accessList||[])];if(e){const t=(0,f.N)(e);r.push(Qt(t.recoveryParam,"recoveryParam")),r.push((0,f.G1)(t.r)),r.push((0,f.G1)(t.s))}return(0,f.xs)(["0x02",y(r)])}function Xt(t,e){const r=[Qt(t.chainId||0,"chainId"),Qt(t.nonce||0,"nonce"),Qt(t.gasPrice||0,"gasPrice"),Qt(t.gasLimit||0,"gasLimit"),null!=t.to?C(t.to):"0x",Qt(t.value||0,"value"),t.data||"0x",Jt(t.accessList||[])];if(e){const t=(0,f.N)(e);r.push(Qt(t.recoveryParam,"recoveryParam")),r.push((0,f.G1)(t.r)),r.push((0,f.G1)(t.s))}return(0,f.xs)(["0x01",y(r)])}function Vt(t,e,r){try{const r=Ut(e[0]).toNumber();if(0!==r&&1!==r)throw new Error("bad recid");t.v=r}catch(t){Yt.throwArgumentError("invalid v for transaction type: 1","v",e[0])}t.r=(0,f.$m)(e[1],32),t.s=(0,f.$m)(e[2],32);try{const e=p(r(t));t.from=zt(e,{r:t.r,s:t.s,recoveryParam:t.v})}catch(t){}}!function(t){t[t.legacy=0]="legacy",t[t.eip2930=1]="eip2930",t[t.eip1559=2]="eip1559"}(Gt||(Gt={}));var Wt=r(64128),Zt=r(23792);const $t=new i.Yd("abstract-provider/5.7.0");class te extends n.dk{static isForkEvent(t){return!(!t||!t._isForkEvent)}}class ee{constructor(){$t.checkAbstract(new.target,ee),(0,n.zG)(this,"_isProvider",!0)}getFeeData(){return t=this,e=void 0,i=function*(){const{block:t,gasPrice:e}=yield(0,n.mE)({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((t=>null))});let r=null,i=null,o=null;return t&&t.baseFeePerGas&&(r=t.baseFeePerGas,o=u.O$.from("1500000000"),i=t.baseFeePerGas.mul(2).add(o)),{lastBaseFeePerGas:r,maxFeePerGas:i,maxPriorityFeePerGas:o,gasPrice:e}},new((r=void 0)||(r=Promise))((function(n,o){function s(t){try{c(i.next(t))}catch(t){o(t)}}function a(t){try{c(i.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}));var t,e,r,i}addListener(t,e){return this.on(t,e)}removeListener(t,e){return this.off(t,e)}static isProvider(t){return!(!t||!t._isProvider)}}var re=r(26627);class ne{constructor(t){(0,n.zG)(this,"alphabet",t),(0,n.zG)(this,"base",t.length),(0,n.zG)(this,"_alphabetMap",{}),(0,n.zG)(this,"_leader",t.charAt(0));for(let e=0;e<t.length;e++)this._alphabetMap[t.charAt(e)]=e}encode(t){let e=(0,f.lE)(t);if(0===e.length)return"";let r=[0];for(let t=0;t<e.length;++t){let n=e[t];for(let t=0;t<r.length;++t)n+=r[t]<<8,r[t]=n%this.base,n=n/this.base|0;for(;n>0;)r.push(n%this.base),n=n/this.base|0}let n="";for(let t=0;0===e[t]&&t<e.length-1;++t)n+=this._leader;for(let t=r.length-1;t>=0;--t)n+=this.alphabet[r[t]];return n}decode(t){if("string"!=typeof t)throw new TypeError("Expected String");let e=[];if(0===t.length)return new Uint8Array(e);e.push(0);for(let r=0;r<t.length;r++){let n=this._alphabetMap[t[r]];if(void 0===n)throw new Error("Non-base"+this.base+" character");let i=n;for(let t=0;t<e.length;++t)i+=e[t]*this.base,e[t]=255&i,i>>=8;for(;i>0;)e.push(255&i),i>>=8}for(let r=0;t[r]===this._leader&&r<t.length-1;++r)e.push(0);return(0,f.lE)(new Uint8Array(e.reverse()))}}new ne("abcdefghijklmnopqrstuvwxyz234567");const ie=new ne("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");function oe(t,e){null==e&&(e=1);const r=[],n=r.forEach,i=function(t,e){n.call(t,(function(t){e>0&&Array.isArray(t)?i(t,e-1):r.push(t)}))};return i(t,e),r}function se(t){return 1&t?~t>>1:t>>1}function ae(t,e){let r=Array(t);for(let n=0,i=-1;n<t;n++)r[n]=i+=1+e();return r}function ce(t,e){let r=Array(t);for(let n=0,i=0;n<t;n++)r[n]=i+=se(e());return r}function le(t,e){let r=ae(t(),t),n=t(),i=ae(n,t),o=function(t,e){let r=Array(t);for(let n=0;n<t;n++)r[n]=1+e();return r}(n,t);for(let t=0;t<n;t++)for(let e=0;e<o[t];e++)r.push(i[t]+e);return e?r.map((t=>e[t])):r}function ue(t,e,r){let n=Array(t).fill(void 0).map((()=>[]));for(let i=0;i<e;i++)ce(t,r).forEach(((t,e)=>n[e].push(t)));return n}function fe(t,e){let r=1+e(),n=e(),i=function(t){let e=[];for(;;){let r=t();if(0==r)break;e.push(r)}return e}(e);return oe(ue(i.length,1+t,e).map(((t,e)=>{const o=t[0],s=t.slice(1);return Array(i[e]).fill(void 0).map(((t,e)=>{let i=e*n;return[o+e*r,s.map((t=>t+i))]}))})))}function de(t,e){return ue(1+e(),1+t,e).map((t=>[t[0],t.slice(1)]))}const he=function(t){let e=0;return()=>t[e++]}(function(t){let e=0;function r(){return t[e++]<<8|t[e++]}let n=r(),i=1,o=[0,1];for(let t=1;t<n;t++)o.push(i+=r());let s=r(),a=e;e+=s;let c=0,l=0;function u(){return 0==c&&(l=l<<8|t[e++],c=8),l>>--c&1}const f=Math.pow(2,31),d=f>>>1,h=d>>1,p=f-1;let m=0;for(let t=0;t<31;t++)m=m<<1|u();let g=[],A=0,v=f;for(;;){let t=Math.floor(((m-A+1)*i-1)/v),e=0,r=n;for(;r-e>1;){let n=e+r>>>1;t<o[n]?r=n:e=n}if(0==e)break;g.push(e);let s=A+Math.floor(v*o[e]/i),a=A+Math.floor(v*o[e+1]/i)-1;for(;0==((s^a)&d);)m=m<<1&p|u(),s=s<<1&p,a=a<<1&p|1;for(;s&~a&h;)m=m&d|m<<1&p>>>1|u(),s=s<<1^d,a=(a^d)<<1|d|1;A=s,v=1+a-s}let y=n-4;return g.map((e=>{switch(e-y){case 3:return y+65792+(t[a++]<<16|t[a++]<<8|t[a++]);case 2:return y+256+(t[a++]<<8|t[a++]);case 1:return y+t[a++];default:return e-1}}))}((0,re.J)(""))),pe=new Set(le(he)),me=new Set(le(he)),ge=function(t){let e=[];for(;;){let r=t();if(0==r)break;e.push(fe(r,t))}for(;;){let r=t()-1;if(r<0)break;e.push(de(r,t))}return function(t){const e={};for(let r=0;r<t.length;r++){const n=t[r];e[n[0]]=n[1]}return e}(oe(e))}(he),Ae=function(t){let e=le(t).sort(((t,e)=>t-e));return function r(){let n=[];for(;;){let i=le(t,e);if(0==i.length)break;n.push({set:new Set(i),node:r()})}n.sort(((t,e)=>e.set.size-t.set.size));let i=t(),o=i%3;i=i/3|0;let s=!!(1&i);return i>>=1,{branches:n,valid:o,fe0f:s,save:1==i,check:2==i}}()}(he);function ve(t){return(0,R.XL)(t)}function ye(t){return t.filter((t=>65039!=t))}function be(t){for(let e of t.split(".")){let t=ve(e);try{for(let e=t.lastIndexOf(95)-1;e>=0;e--)if(95!==t[e])throw new Error("underscore only allowed at start");if(t.length>=4&&t.every((t=>t<128))&&45===t[2]&&45===t[3])throw new Error("invalid label extension")}catch(t){throw new Error(`Invalid label "${e}": ${t.message}`)}}return t}function we(t,e){var r;let n,i,o=Ae,s=[],a=t.length;for(e&&(e.length=0);a;){let c=t[--a];if(o=null===(r=o.branches.find((t=>t.set.has(c))))||void 0===r?void 0:r.node,!o)break;if(o.save)i=c;else if(o.check&&c===i)break;s.push(c),o.fe0f&&(s.push(65039),a>0&&65039==t[a-1]&&a--),o.valid&&(n=s.slice(),2==o.valid&&n.splice(1,1),e&&e.push(...t.slice(a).reverse()),t.length=a)}return n}const Ee=new i.Yd(_),ke=new Uint8Array(32);function Ne(t){if(0===t.length)throw new Error("invalid ENS name; empty component");return t}function Ie(t){const e=(0,R.Y0)(function(t){return be(function(t,e){let r=ve(t).reverse(),n=[];for(;r.length;){let t=we(r);if(t){n.push(...e(t));continue}let i=r.pop();if(pe.has(i)){n.push(i);continue}if(me.has(i))continue;let o=ge[i];if(!o)throw new Error(`Disallowed codepoint: 0x${i.toString(16).toUpperCase()}`);n.push(...o)}return be(String.fromCodePoint(...n).normalize("NFC"))}(t,ye))}(t)),r=[];if(0===t.length)return r;let n=0;for(let t=0;t<e.length;t++)46===e[t]&&(r.push(Ne(e.slice(n,t))),n=t+1);if(n>=e.length)throw new Error("invalid ENS name; empty component");return r.push(Ne(e.slice(n))),r}function Pe(t){"string"!=typeof t&&Ee.throwArgumentError("invalid ENS name; not a string","name",t);let e=ke;const r=Ie(t);for(;r.length;)e=p((0,f.zo)([e,p(r.pop())]));return(0,f.Dv)(e)}ke.fill(0);var xe=r(67178);function Ce(t){return"0x"+W().sha256().update((0,f.lE)(t)).digest("hex")}new i.Yd("sha2/5.7.0");var _e=r(92882),Re=r.n(_e);r(25108);const Be=new i.Yd(Zt.i);class Te{constructor(){this.formats=this.getDefaultFormats()}getDefaultFormats(){const t={},e=this.address.bind(this),r=this.bigNumber.bind(this),i=this.blockTag.bind(this),o=this.data.bind(this),s=this.hash.bind(this),a=this.hex.bind(this),c=this.number.bind(this),l=this.type.bind(this);return t.transaction={hash:s,type:l,accessList:Te.allowNull(this.accessList.bind(this),null),blockHash:Te.allowNull(s,null),blockNumber:Te.allowNull(c,null),transactionIndex:Te.allowNull(c,null),confirmations:Te.allowNull(c,null),from:e,gasPrice:Te.allowNull(r),maxPriorityFeePerGas:Te.allowNull(r),maxFeePerGas:Te.allowNull(r),gasLimit:r,to:Te.allowNull(e,null),value:r,nonce:c,data:o,r:Te.allowNull(this.uint256),s:Te.allowNull(this.uint256),v:Te.allowNull(c),creates:Te.allowNull(e,null),raw:Te.allowNull(o)},t.transactionRequest={from:Te.allowNull(e),nonce:Te.allowNull(c),gasLimit:Te.allowNull(r),gasPrice:Te.allowNull(r),maxPriorityFeePerGas:Te.allowNull(r),maxFeePerGas:Te.allowNull(r),to:Te.allowNull(e),value:Te.allowNull(r),data:Te.allowNull((t=>this.data(t,!0))),type:Te.allowNull(c),accessList:Te.allowNull(this.accessList.bind(this),null)},t.receiptLog={transactionIndex:c,blockNumber:c,transactionHash:s,address:e,topics:Te.arrayOf(s),data:o,logIndex:c,blockHash:s},t.receipt={to:Te.allowNull(this.address,null),from:Te.allowNull(this.address,null),contractAddress:Te.allowNull(e,null),transactionIndex:c,root:Te.allowNull(a),gasUsed:r,logsBloom:Te.allowNull(o),blockHash:s,transactionHash:s,logs:Te.arrayOf(this.receiptLog.bind(this)),blockNumber:c,confirmations:Te.allowNull(c,null),cumulativeGasUsed:r,effectiveGasPrice:Te.allowNull(r),status:Te.allowNull(c),type:l},t.block={hash:Te.allowNull(s),parentHash:s,number:c,timestamp:c,nonce:Te.allowNull(a),difficulty:this.difficulty.bind(this),gasLimit:r,gasUsed:r,miner:Te.allowNull(e),extraData:o,transactions:Te.allowNull(Te.arrayOf(s)),baseFeePerGas:Te.allowNull(r)},t.blockWithTransactions=(0,n.DC)(t.block),t.blockWithTransactions.transactions=Te.allowNull(Te.arrayOf(this.transactionResponse.bind(this))),t.filter={fromBlock:Te.allowNull(i,void 0),toBlock:Te.allowNull(i,void 0),blockHash:Te.allowNull(s,void 0),address:Te.allowNull(e,void 0),topics:Te.allowNull(this.topics.bind(this),void 0)},t.filterLog={blockNumber:Te.allowNull(c),blockHash:Te.allowNull(s),transactionIndex:c,removed:Te.allowNull(this.boolean.bind(this)),address:e,data:Te.allowFalsish(o,"0x"),topics:Te.arrayOf(s),transactionHash:s,logIndex:c},t}accessList(t){return Kt(t||[])}number(t){return"0x"===t?0:u.O$.from(t).toNumber()}type(t){return"0x"===t||null==t?0:u.O$.from(t).toNumber()}bigNumber(t){return u.O$.from(t)}boolean(t){if("boolean"==typeof t)return t;if("string"==typeof t){if("true"===(t=t.toLowerCase()))return!0;if("false"===t)return!1}throw new Error("invalid boolean - "+t)}hex(t,e){return"string"==typeof t&&(e||"0x"===t.substring(0,2)||(t="0x"+t),(0,f.A7)(t))?t.toLowerCase():Be.throwArgumentError("invalid hash","value",t)}data(t,e){const r=this.hex(t,e);if(r.length%2!=0)throw new Error("invalid data; odd-length - "+t);return r}address(t){return C(t)}callAddress(t){if(!(0,f.A7)(t,32))return null;const e=C((0,f.p3)(t,12));return"0x0000000000000000000000000000000000000000"===e?null:e}contractAddress(t){return function(t){let e=null;try{e=C(t.from)}catch(e){k.throwArgumentError("missing from address","transaction",t)}const r=(0,f.G1)((0,f.lE)(u.O$.from(t.nonce).toHexString()));return C((0,f.p3)(p(y([e,r])),12))}(t)}blockTag(t){if(null==t)return"latest";if("earliest"===t)return"0x0";switch(t){case"earliest":return"0x0";case"latest":case"pending":case"safe":case"finalized":return t}if("number"==typeof t||(0,f.A7)(t))return(0,f.$P)(t);throw new Error("invalid blockTag")}hash(t,e){const r=this.hex(t,e);return 32!==(0,f.E1)(r)?Be.throwArgumentError("invalid hash","value",t):r}difficulty(t){if(null==t)return null;const e=u.O$.from(t);try{return e.toNumber()}catch(t){}return null}uint256(t){if(!(0,f.A7)(t))throw new Error("invalid uint256");return(0,f.$m)(t,32)}_block(t,e){null!=t.author&&null==t.miner&&(t.miner=t.author);const r=null!=t._difficulty?t._difficulty:t.difficulty,n=Te.check(e,t);return n._difficulty=null==r?null:u.O$.from(r),n}block(t){return this._block(t,this.formats.block)}blockWithTransactions(t){return this._block(t,this.formats.blockWithTransactions)}transactionRequest(t){return Te.check(this.formats.transactionRequest,t)}transactionResponse(t){null!=t.gas&&null==t.gasLimit&&(t.gasLimit=t.gas),t.to&&u.O$.from(t.to).isZero()&&(t.to="0x0000000000000000000000000000000000000000"),null!=t.input&&null==t.data&&(t.data=t.input),null==t.to&&null==t.creates&&(t.creates=this.contractAddress(t)),1!==t.type&&2!==t.type||null!=t.accessList||(t.accessList=[]);const e=Te.check(this.formats.transaction,t);if(null!=t.chainId){let r=t.chainId;(0,f.A7)(r)&&(r=u.O$.from(r).toNumber()),e.chainId=r}else{let r=t.networkId;null==r&&null==e.v&&(r=t.chainId),(0,f.A7)(r)&&(r=u.O$.from(r).toNumber()),"number"!=typeof r&&null!=e.v&&(r=(e.v-35)/2,r<0&&(r=0),r=parseInt(r)),"number"!=typeof r&&(r=0),e.chainId=r}return e.blockHash&&"x"===e.blockHash.replace(/0/g,"")&&(e.blockHash=null),e}transaction(t){return function(t){const e=(0,f.lE)(t);if(e[0]>127)return function(t){const e=E(t);9!==e.length&&6!==e.length&&Yt.throwArgumentError("invalid raw transaction","rawTransaction",t);const r={nonce:Ut(e[0]).toNumber(),gasPrice:Ut(e[1]),gasLimit:Ut(e[2]),to:qt(e[3]),value:Ut(e[4]),data:e[5],chainId:0};if(6===e.length)return r;try{r.v=u.O$.from(e[6]).toNumber()}catch(t){return r}if(r.r=(0,f.$m)(e[7],32),r.s=(0,f.$m)(e[8],32),u.O$.from(r.r).isZero()&&u.O$.from(r.s).isZero())r.chainId=r.v,r.v=0;else{r.chainId=Math.floor((r.v-35)/2),r.chainId<0&&(r.chainId=0);let n=r.v-27;const i=e.slice(0,6);0!==r.chainId&&(i.push((0,f.Dv)(r.chainId)),i.push("0x"),i.push("0x"),n-=2*r.chainId+8);const o=p(y(i));try{r.from=zt(o,{r:(0,f.Dv)(r.r),s:(0,f.Dv)(r.s),recoveryParam:n})}catch(t){}r.hash=p(t)}return r.type=null,r}(e);switch(e[0]){case 1:return function(t){const e=E(t.slice(1));8!==e.length&&11!==e.length&&Yt.throwArgumentError("invalid component count for transaction type: 1","payload",(0,f.Dv)(t));const r={type:1,chainId:Ut(e[0]).toNumber(),nonce:Ut(e[1]).toNumber(),gasPrice:Ut(e[2]),gasLimit:Ut(e[3]),to:qt(e[4]),value:Ut(e[5]),data:e[6],accessList:Kt(e[7])};return 8===e.length||(r.hash=p(t),Vt(r,e.slice(8),Xt)),r}(e);case 2:return function(t){const e=E(t.slice(1));9!==e.length&&12!==e.length&&Yt.throwArgumentError("invalid component count for transaction type: 2","payload",(0,f.Dv)(t));const r=Ut(e[2]),n=Ut(e[3]),i={type:2,chainId:Ut(e[0]).toNumber(),nonce:Ut(e[1]).toNumber(),maxPriorityFeePerGas:r,maxFeePerGas:n,gasPrice:null,gasLimit:Ut(e[4]),to:qt(e[5]),value:Ut(e[6]),data:e[7],accessList:Kt(e[8])};return 9===e.length||(i.hash=p(t),Vt(i,e.slice(9),jt)),i}(e)}return Yt.throwError(`unsupported transaction type: ${e[0]}`,i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:e[0]})}(t)}receiptLog(t){return Te.check(this.formats.receiptLog,t)}receipt(t){const e=Te.check(this.formats.receipt,t);if(null!=e.root)if(e.root.length<=4){const t=u.O$.from(e.root).toNumber();0===t||1===t?(null!=e.status&&e.status!==t&&Be.throwArgumentError("alt-root-status/status mismatch","value",{root:e.root,status:e.status}),e.status=t,delete e.root):Be.throwArgumentError("invalid alt-root-status","value.root",e.root)}else 66!==e.root.length&&Be.throwArgumentError("invalid root hash","value.root",e.root);return null!=e.status&&(e.byzantium=!0),e}topics(t){return Array.isArray(t)?t.map((t=>this.topics(t))):null!=t?this.hash(t,!0):null}filter(t){return Te.check(this.formats.filter,t)}filterLog(t){return Te.check(this.formats.filterLog,t)}static check(t,e){const r={};for(const n in t)try{const i=t[n](e[n]);void 0!==i&&(r[n]=i)}catch(t){throw t.checkKey=n,t.checkValue=e[n],t}return r}static allowNull(t,e){return function(r){return null==r?e:t(r)}}static allowFalsish(t,e){return function(r){return r?t(r):e}}static arrayOf(t){return function(e){if(!Array.isArray(e))throw new Error("not an array");const r=[];return e.forEach((function(e){r.push(t(e))})),r}}}var Se=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{c(n.next(t))}catch(t){o(t)}}function a(t){try{c(n.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};const Oe=new i.Yd(Zt.i);function De(t){return null==t?"null":(32!==(0,f.E1)(t)&&Oe.throwArgumentError("invalid topic","topic",t),t.toLowerCase())}function Fe(t){for(t=t.slice();t.length>0&&null==t[t.length-1];)t.pop();return t.map((t=>{if(Array.isArray(t)){const e={};t.forEach((t=>{e[De(t)]=!0}));const r=Object.keys(e);return r.sort(),r.join("|")}return De(t)})).join("&")}function Me(t){if("string"==typeof t){if(t=t.toLowerCase(),32===(0,f.E1)(t))return"tx:"+t;if(-1===t.indexOf(":"))return t}else{if(Array.isArray(t))return"filter:*:"+Fe(t);if(te.isForkEvent(t))throw Oe.warn("not implemented"),new Error("not implemented");if(t&&"object"==typeof t)return"filter:"+(t.address||"*")+":"+Fe(t.topics||[])}throw new Error("invalid event - "+t)}function Le(){return(new Date).getTime()}function Ye(t){return new Promise((e=>{setTimeout(e,t)}))}const Ge=["block","network","pending","poll"];class qe{constructor(t,e,r){(0,n.zG)(this,"tag",t),(0,n.zG)(this,"listener",e),(0,n.zG)(this,"once",r),this._lastBlockNumber=-2,this._inflight=!1}get event(){switch(this.type){case"tx":return this.hash;case"filter":return this.filter}return this.tag}get type(){return this.tag.split(":")[0]}get hash(){const t=this.tag.split(":");return"tx"!==t[0]?null:t[1]}get filter(){const t=this.tag.split(":");if("filter"!==t[0])return null;const e=t[1],r=""===(n=t[2])?[]:n.split(/&/g).map((t=>{if(""===t)return[];const e=t.split("|").map((t=>"null"===t?null:t));return 1===e.length?e[0]:e}));var n;const i={};return r.length>0&&(i.topics=r),e&&"*"!==e&&(i.address=e),i}pollable(){return this.tag.indexOf(":")>=0||Ge.indexOf(this.tag)>=0}}const Ue={0:{symbol:"btc",p2pkh:0,p2sh:5,prefix:"bc"},2:{symbol:"ltc",p2pkh:48,p2sh:50,prefix:"ltc"},3:{symbol:"doge",p2pkh:30,p2sh:22},60:{symbol:"eth",ilk:"eth"},61:{symbol:"etc",ilk:"eth"},700:{symbol:"xdai",ilk:"eth"}};function ze(t){return(0,f.$m)(u.O$.from(t).toHexString(),32)}function Qe(t){return ie.encode((0,f.zo)([t,(0,f.p3)(Ce(Ce(t)),0,4)]))}const He=new RegExp("^(ipfs)://(.*)$","i"),Ke=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),He,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];function Je(t,e){try{return(0,R.ZN)(je(t,e))}catch(t){}return null}function je(t,e){if("0x"===t)return null;const r=u.O$.from((0,f.p3)(t,e,e+32)).toNumber(),n=u.O$.from((0,f.p3)(t,r,r+32)).toNumber();return(0,f.p3)(t,r+32,r+32+n)}function Xe(t){return t.match(/^ipfs:\/\/ipfs\//i)?t=t.substring(12):t.match(/^ipfs:\/\//i)?t=t.substring(7):Oe.throwArgumentError("unsupported IPFS format","link",t),`https://gateway.ipfs.io/ipfs/${t}`}function Ve(t){const e=(0,f.lE)(t);if(e.length>32)throw new Error("internal; should not happen");const r=new Uint8Array(32);return r.set(e,32-e.length),r}function We(t){if(t.length%32==0)return t;const e=new Uint8Array(32*Math.ceil(t.length/32));return e.set(t),e}function Ze(t){const e=[];let r=0;for(let n=0;n<t.length;n++)e.push(null),r+=32;for(let n=0;n<t.length;n++){const i=(0,f.lE)(t[n]);e[n]=Ve(r),e.push(Ve(i.length)),e.push(We(i)),r+=32+32*Math.ceil(i.length/32)}return(0,f.xs)(e)}class $e{constructor(t,e,r,i){(0,n.zG)(this,"provider",t),(0,n.zG)(this,"name",r),(0,n.zG)(this,"address",t.formatter.address(e)),(0,n.zG)(this,"_resolvedAddress",i)}supportsWildcard(){return this._supportsEip2544||(this._supportsEip2544=this.provider.call({to:this.address,data:"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"}).then((t=>u.O$.from(t).eq(1))).catch((t=>{if(t.code===i.Yd.errors.CALL_EXCEPTION)return!1;throw this._supportsEip2544=null,t}))),this._supportsEip2544}_fetch(t,e){return Se(this,void 0,void 0,(function*(){const r={to:this.address,ccipReadEnabled:!0,data:(0,f.xs)([t,Pe(this.name),e||"0x"])};let n=!1;var o;(yield this.supportsWildcard())&&(n=!0,r.data=(0,f.xs)(["0x9061b923",Ze([(o=this.name,(0,f.Dv)((0,f.zo)(Ie(o).map((t=>{if(t.length>63)throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");const e=new Uint8Array(t.length+1);return e.set(t,1),e[0]=e.length-1,e}))))+"00"),r.data])]));try{let t=yield this.provider.call(r);return(0,f.lE)(t).length%32==4&&Oe.throwError("resolver threw error",i.Yd.errors.CALL_EXCEPTION,{transaction:r,data:t}),n&&(t=je(t,0)),t}catch(t){if(t.code===i.Yd.errors.CALL_EXCEPTION)return null;throw t}}))}_fetchBytes(t,e){return Se(this,void 0,void 0,(function*(){const r=yield this._fetch(t,e);return null!=r?je(r,0):null}))}_getAddress(t,e){const r=Ue[String(t)];if(null==r&&Oe.throwError(`unsupported coin type: ${t}`,i.Yd.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${t})`}),"eth"===r.ilk)return this.provider.formatter.address(e);const n=(0,f.lE)(e);if(null!=r.p2pkh){const t=e.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);if(t){const e=parseInt(t[1],16);if(t[2].length===2*e&&e>=1&&e<=75)return Qe((0,f.zo)([[r.p2pkh],"0x"+t[2]]))}}if(null!=r.p2sh){const t=e.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);if(t){const e=parseInt(t[1],16);if(t[2].length===2*e&&e>=1&&e<=75)return Qe((0,f.zo)([[r.p2sh],"0x"+t[2]]))}}if(null!=r.prefix){const t=n[1];let e=n[0];if(0===e?20!==t&&32!==t&&(e=-1):e=-1,e>=0&&n.length===2+t&&t>=1&&t<=75){const t=Re().toWords(n.slice(2));return t.unshift(e),Re().encode(r.prefix,t)}}return null}getAddress(t){return Se(this,void 0,void 0,(function*(){if(null==t&&(t=60),60===t)try{const t=yield this._fetch("0x3b3b57de");return"0x"===t||"0x0000000000000000000000000000000000000000000000000000000000000000"===t?null:this.provider.formatter.callAddress(t)}catch(t){if(t.code===i.Yd.errors.CALL_EXCEPTION)return null;throw t}const e=yield this._fetchBytes("0xf1cb7e06",ze(t));if(null==e||"0x"===e)return null;const r=this._getAddress(t,e);return null==r&&Oe.throwError("invalid or unsupported coin data",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${t})`,coinType:t,data:e}),r}))}getAvatar(){return Se(this,void 0,void 0,(function*(){const t=[{type:"name",content:this.name}];try{const e=yield this.getText("avatar");if(null==e)return null;for(let r=0;r<Ke.length;r++){const n=e.match(Ke[r]);if(null==n)continue;const i=n[1].toLowerCase();switch(i){case"https":return t.push({type:"url",content:e}),{linkage:t,url:e};case"data":return t.push({type:"data",content:e}),{linkage:t,url:e};case"ipfs":return t.push({type:"ipfs",content:e}),{linkage:t,url:Xe(e)};case"erc721":case"erc1155":{const r="erc721"===i?"0xc87b56dd":"0x0e89341c";t.push({type:i,content:e});const o=this._resolvedAddress||(yield this.getAddress()),s=(n[2]||"").split("/");if(2!==s.length)return null;const a=yield this.provider.formatter.address(s[0]),c=(0,f.$m)(u.O$.from(s[1]).toHexString(),32);if("erc721"===i){const e=this.provider.formatter.callAddress(yield this.provider.call({to:a,data:(0,f.xs)(["0x6352211e",c])}));if(o!==e)return null;t.push({type:"owner",content:e})}else if("erc1155"===i){const e=u.O$.from(yield this.provider.call({to:a,data:(0,f.xs)(["0x00fdd58e",(0,f.$m)(o,32),c])}));if(e.isZero())return null;t.push({type:"balance",content:e.toString()})}const l={to:this.provider.formatter.address(s[0]),data:(0,f.xs)([r,c])};let d=Je(yield this.provider.call(l),0);if(null==d)return null;t.push({type:"metadata-url-base",content:d}),"erc1155"===i&&(d=d.replace("{id}",c.substring(2)),t.push({type:"metadata-url-expanded",content:d})),d.match(/^ipfs:/i)&&(d=Xe(d)),t.push({type:"metadata-url",content:d});const h=yield(0,Wt.rd)(d);if(!h)return null;t.push({type:"metadata",content:JSON.stringify(h)});let p=h.image;if("string"!=typeof p)return null;if(p.match(/^(https:\/\/|data:)/i));else{if(null==p.match(He))return null;t.push({type:"url-ipfs",content:p}),p=Xe(p)}return t.push({type:"url",content:p}),{linkage:t,url:p}}}}}catch(t){}return null}))}getContentHash(){return Se(this,void 0,void 0,(function*(){const t=yield this._fetchBytes("0xbc1c58d1");if(null==t||"0x"===t)return null;const e=t.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(e){const t=parseInt(e[3],16);if(e[4].length===2*t)return"ipfs://"+ie.encode("0x"+e[1])}const r=t.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(r){const t=parseInt(r[3],16);if(r[4].length===2*t)return"ipns://"+ie.encode("0x"+r[1])}const n=t.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return"bzz://"+n[1];const o=t.match(/^0x90b2c605([0-9a-f]*)$/);if(o&&68===o[1].length){const t={"=":"","+":"-","/":"_"};return"sia://"+(0,re.c)("0x"+o[1]).replace(/[=+\/]/g,(e=>t[e]))}return Oe.throwError("invalid or unsupported content hash data",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"getContentHash()",data:t})}))}getText(t){return Se(this,void 0,void 0,(function*(){let e=(0,R.Y0)(t);e=(0,f.zo)([ze(64),ze(e.length),e]),e.length%32!=0&&(e=(0,f.zo)([e,(0,f.$m)("0x",32-t.length%32)]));const r=yield this._fetchBytes("0x59d1d43c",(0,f.Dv)(e));return null==r||"0x"===r?null:(0,R.ZN)(r)}))}}let tr=null,er=1;class rr extends ee{constructor(t){if(super(),this._events=[],this._emitted={block:-2},this.disableCcipRead=!1,this.formatter=new.target.getFormatter(),(0,n.zG)(this,"anyNetwork","any"===t),this.anyNetwork&&(t=this.detectNetwork()),t instanceof Promise)this._networkPromise=t,t.catch((t=>{})),this._ready().catch((t=>{}));else{const e=(0,n.tu)(new.target,"getNetwork")(t);e?((0,n.zG)(this,"_network",e),this.emit("network",e,null)):Oe.throwArgumentError("invalid network","network",t)}this._maxInternalBlockNumber=-1024,this._lastBlockNumber=-2,this._maxFilterBlockRange=10,this._pollingInterval=4e3,this._fastQueryDate=0}_ready(){return Se(this,void 0,void 0,(function*(){if(null==this._network){let t=null;if(this._networkPromise)try{t=yield this._networkPromise}catch(t){}null==t&&(t=yield this.detectNetwork()),t||Oe.throwError("no network detected",i.Yd.errors.UNKNOWN_ERROR,{}),null==this._network&&(this.anyNetwork?this._network=t:(0,n.zG)(this,"_network",t),this.emit("network",t,null))}return this._network}))}get ready(){return(0,Wt.$l)((()=>this._ready().then((t=>t),(t=>{if(t.code!==i.Yd.errors.NETWORK_ERROR||"noNetwork"!==t.event)throw t}))))}static getFormatter(){return null==tr&&(tr=new Te),tr}static getNetwork(t){return(0,xe.H)(null==t?"homestead":t)}ccipReadFetch(t,e,r){return Se(this,void 0,void 0,(function*(){if(this.disableCcipRead||0===r.length)return null;const n=t.to.toLowerCase(),o=e.toLowerCase(),s=[];for(let t=0;t<r.length;t++){const e=r[t],a=e.replace("{sender}",n).replace("{data}",o),c=e.indexOf("{data}")>=0?null:JSON.stringify({data:o,sender:n}),l=yield(0,Wt.rd)({url:a,errorPassThrough:!0},c,((t,e)=>(t.status=e.statusCode,t)));if(l.data)return l.data;const u=l.message||"unknown error";if(l.status>=400&&l.status<500)return Oe.throwError(`response not found during CCIP fetch: ${u}`,i.Yd.errors.SERVER_ERROR,{url:e,errorMessage:u});s.push(u)}return Oe.throwError(`error encountered during CCIP fetch: ${s.map((t=>JSON.stringify(t))).join(", ")}`,i.Yd.errors.SERVER_ERROR,{urls:r,errorMessages:s})}))}_getInternalBlockNumber(t){return Se(this,void 0,void 0,(function*(){if(yield this._ready(),t>0)for(;this._internalBlockNumber;){const e=this._internalBlockNumber;try{const r=yield e;if(Le()-r.respTime<=t)return r.blockNumber;break}catch(t){if(this._internalBlockNumber===e)break}}const e=Le(),r=(0,n.mE)({blockNumber:this.perform("getBlockNumber",{}),networkError:this.getNetwork().then((t=>null),(t=>t))}).then((({blockNumber:t,networkError:n})=>{if(n)throw this._internalBlockNumber===r&&(this._internalBlockNumber=null),n;const i=Le();return(t=u.O$.from(t).toNumber())<this._maxInternalBlockNumber&&(t=this._maxInternalBlockNumber),this._maxInternalBlockNumber=t,this._setFastBlockNumber(t),{blockNumber:t,reqTime:e,respTime:i}}));return this._internalBlockNumber=r,r.catch((t=>{this._internalBlockNumber===r&&(this._internalBlockNumber=null)})),(yield r).blockNumber}))}poll(){return Se(this,void 0,void 0,(function*(){const t=er++,e=[];let r=null;try{r=yield this._getInternalBlockNumber(100+this.pollingInterval/2)}catch(t){return void this.emit("error",t)}if(this._setFastBlockNumber(r),this.emit("poll",t,r),r!==this._lastBlockNumber){if(-2===this._emitted.block&&(this._emitted.block=r-1),Math.abs(this._emitted.block-r)>1e3)Oe.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${r})`),this.emit("error",Oe.makeError("network block skew detected",i.Yd.errors.NETWORK_ERROR,{blockNumber:r,event:"blockSkew",previousBlockNumber:this._emitted.block})),this.emit("block",r);else for(let t=this._emitted.block+1;t<=r;t++)this.emit("block",t);this._emitted.block!==r&&(this._emitted.block=r,Object.keys(this._emitted).forEach((t=>{if("block"===t)return;const e=this._emitted[t];"pending"!==e&&r-e>12&&delete this._emitted[t]}))),-2===this._lastBlockNumber&&(this._lastBlockNumber=r-1),this._events.forEach((t=>{switch(t.type){case"tx":{const r=t.hash;let n=this.getTransactionReceipt(r).then((t=>t&&null!=t.blockNumber?(this._emitted["t:"+r]=t.blockNumber,this.emit(r,t),null):null)).catch((t=>{this.emit("error",t)}));e.push(n);break}case"filter":if(!t._inflight){t._inflight=!0,-2===t._lastBlockNumber&&(t._lastBlockNumber=r-1);const n=t.filter;n.fromBlock=t._lastBlockNumber+1,n.toBlock=r;const i=n.toBlock-this._maxFilterBlockRange;i>n.fromBlock&&(n.fromBlock=i),n.fromBlock<0&&(n.fromBlock=0);const o=this.getLogs(n).then((e=>{t._inflight=!1,0!==e.length&&e.forEach((e=>{e.blockNumber>t._lastBlockNumber&&(t._lastBlockNumber=e.blockNumber),this._emitted["b:"+e.blockHash]=e.blockNumber,this._emitted["t:"+e.transactionHash]=e.blockNumber,this.emit(n,e)}))})).catch((e=>{this.emit("error",e),t._inflight=!1}));e.push(o)}}})),this._lastBlockNumber=r,Promise.all(e).then((()=>{this.emit("didPoll",t)})).catch((t=>{this.emit("error",t)}))}else this.emit("didPoll",t)}))}resetEventsBlock(t){this._lastBlockNumber=t-1,this.polling&&this.poll()}get network(){return this._network}detectNetwork(){return Se(this,void 0,void 0,(function*(){return Oe.throwError("provider does not support network detection",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"provider.detectNetwork"})}))}getNetwork(){return Se(this,void 0,void 0,(function*(){const t=yield this._ready(),e=yield this.detectNetwork();if(t.chainId!==e.chainId){if(this.anyNetwork)return this._network=e,this._lastBlockNumber=-2,this._fastBlockNumber=null,this._fastBlockNumberPromise=null,this._fastQueryDate=0,this._emitted.block=-2,this._maxInternalBlockNumber=-1024,this._internalBlockNumber=null,this.emit("network",e,t),yield Ye(0),this._network;const r=Oe.makeError("underlying network changed",i.Yd.errors.NETWORK_ERROR,{event:"changed",network:t,detectedNetwork:e});throw this.emit("error",r),r}return t}))}get blockNumber(){return this._getInternalBlockNumber(100+this.pollingInterval/2).then((t=>{this._setFastBlockNumber(t)}),(t=>{})),null!=this._fastBlockNumber?this._fastBlockNumber:-1}get polling(){return null!=this._poller}set polling(t){t&&!this._poller?(this._poller=setInterval((()=>{this.poll()}),this.pollingInterval),this._bootstrapPoll||(this._bootstrapPoll=setTimeout((()=>{this.poll(),this._bootstrapPoll=setTimeout((()=>{this._poller||this.poll(),this._bootstrapPoll=null}),this.pollingInterval)}),0))):!t&&this._poller&&(clearInterval(this._poller),this._poller=null)}get pollingInterval(){return this._pollingInterval}set pollingInterval(t){if("number"!=typeof t||t<=0||parseInt(String(t))!=t)throw new Error("invalid polling interval");this._pollingInterval=t,this._poller&&(clearInterval(this._poller),this._poller=setInterval((()=>{this.poll()}),this._pollingInterval))}_getFastBlockNumber(){const t=Le();return t-this._fastQueryDate>2*this._pollingInterval&&(this._fastQueryDate=t,this._fastBlockNumberPromise=this.getBlockNumber().then((t=>((null==this._fastBlockNumber||t>this._fastBlockNumber)&&(this._fastBlockNumber=t),this._fastBlockNumber)))),this._fastBlockNumberPromise}_setFastBlockNumber(t){null!=this._fastBlockNumber&&t<this._fastBlockNumber||(this._fastQueryDate=Le(),(null==this._fastBlockNumber||t>this._fastBlockNumber)&&(this._fastBlockNumber=t,this._fastBlockNumberPromise=Promise.resolve(t)))}waitForTransaction(t,e,r){return Se(this,void 0,void 0,(function*(){return this._waitForTransaction(t,null==e?1:e,r||0,null)}))}_waitForTransaction(t,e,r,n){return Se(this,void 0,void 0,(function*(){const o=yield this.getTransactionReceipt(t);return(o?o.confirmations:0)>=e?o:new Promise(((o,s)=>{const a=[];let c=!1;const l=function(){return!!c||(c=!0,a.forEach((t=>{t()})),!1)},u=t=>{t.confirmations<e||l()||o(t)};if(this.on(t,u),a.push((()=>{this.removeListener(t,u)})),n){let r=n.startBlock,o=null;const u=a=>Se(this,void 0,void 0,(function*(){c||(yield Ye(1e3),this.getTransactionCount(n.from).then((f=>Se(this,void 0,void 0,(function*(){if(!c){if(f<=n.nonce)r=a;else{{const e=yield this.getTransaction(t);if(e&&null!=e.blockNumber)return}for(null==o&&(o=r-3,o<n.startBlock&&(o=n.startBlock));o<=a;){if(c)return;const r=yield this.getBlockWithTransactions(o);for(let o=0;o<r.transactions.length;o++){const a=r.transactions[o];if(a.hash===t)return;if(a.from===n.from&&a.nonce===n.nonce){if(c)return;const r=yield this.waitForTransaction(a.hash,e);if(l())return;let o="replaced";return a.data===n.data&&a.to===n.to&&a.value.eq(n.value)?o="repriced":"0x"===a.data&&a.from===a.to&&a.value.isZero()&&(o="cancelled"),void s(Oe.makeError("transaction was replaced",i.Yd.errors.TRANSACTION_REPLACED,{cancelled:"replaced"===o||"cancelled"===o,reason:o,replacement:this._wrapTransaction(a),hash:t,receipt:r}))}}o++}}c||this.once("block",u)}}))),(t=>{c||this.once("block",u)})))}));if(c)return;this.once("block",u),a.push((()=>{this.removeListener("block",u)}))}if("number"==typeof r&&r>0){const t=setTimeout((()=>{l()||s(Oe.makeError("timeout exceeded",i.Yd.errors.TIMEOUT,{timeout:r}))}),r);t.unref&&t.unref(),a.push((()=>{clearTimeout(t)}))}}))}))}getBlockNumber(){return Se(this,void 0,void 0,(function*(){return this._getInternalBlockNumber(0)}))}getGasPrice(){return Se(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield this.perform("getGasPrice",{});try{return u.O$.from(t)}catch(e){return Oe.throwError("bad result from backend",i.Yd.errors.SERVER_ERROR,{method:"getGasPrice",result:t,error:e})}}))}getBalance(t,e){return Se(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,n.mE)({address:this._getAddress(t),blockTag:this._getBlockTag(e)}),o=yield this.perform("getBalance",r);try{return u.O$.from(o)}catch(t){return Oe.throwError("bad result from backend",i.Yd.errors.SERVER_ERROR,{method:"getBalance",params:r,result:o,error:t})}}))}getTransactionCount(t,e){return Se(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,n.mE)({address:this._getAddress(t),blockTag:this._getBlockTag(e)}),o=yield this.perform("getTransactionCount",r);try{return u.O$.from(o).toNumber()}catch(t){return Oe.throwError("bad result from backend",i.Yd.errors.SERVER_ERROR,{method:"getTransactionCount",params:r,result:o,error:t})}}))}getCode(t,e){return Se(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,n.mE)({address:this._getAddress(t),blockTag:this._getBlockTag(e)}),o=yield this.perform("getCode",r);try{return(0,f.Dv)(o)}catch(t){return Oe.throwError("bad result from backend",i.Yd.errors.SERVER_ERROR,{method:"getCode",params:r,result:o,error:t})}}))}getStorageAt(t,e,r){return Se(this,void 0,void 0,(function*(){yield this.getNetwork();const o=yield(0,n.mE)({address:this._getAddress(t),blockTag:this._getBlockTag(r),position:Promise.resolve(e).then((t=>(0,f.$P)(t)))}),s=yield this.perform("getStorageAt",o);try{return(0,f.Dv)(s)}catch(t){return Oe.throwError("bad result from backend",i.Yd.errors.SERVER_ERROR,{method:"getStorageAt",params:o,result:s,error:t})}}))}_wrapTransaction(t,e,r){if(null!=e&&32!==(0,f.E1)(e))throw new Error("invalid response - sendTransaction");const n=t;return null!=e&&t.hash!==e&&Oe.throwError("Transaction hash mismatch from Provider.sendTransaction.",i.Yd.errors.UNKNOWN_ERROR,{expectedHash:t.hash,returnedHash:e}),n.wait=(e,n)=>Se(this,void 0,void 0,(function*(){let o;null==e&&(e=1),null==n&&(n=0),0!==e&&null!=r&&(o={data:t.data,from:t.from,nonce:t.nonce,to:t.to,value:t.value,startBlock:r});const s=yield this._waitForTransaction(t.hash,e,n,o);return null==s&&0===e?null:(this._emitted["t:"+t.hash]=s.blockNumber,0===s.status&&Oe.throwError("transaction failed",i.Yd.errors.CALL_EXCEPTION,{transactionHash:t.hash,transaction:t,receipt:s}),s)})),n}sendTransaction(t){return Se(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield Promise.resolve(t).then((t=>(0,f.Dv)(t))),r=this.formatter.transaction(t);null==r.confirmations&&(r.confirmations=0);const n=yield this._getInternalBlockNumber(100+2*this.pollingInterval);try{const t=yield this.perform("sendTransaction",{signedTransaction:e});return this._wrapTransaction(r,t,n)}catch(t){throw t.transaction=r,t.transactionHash=r.hash,t}}))}_getTransactionRequest(t){return Se(this,void 0,void 0,(function*(){const e=yield t,r={};return["from","to"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>t?this._getAddress(t):null)))})),["gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","value"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>t?u.O$.from(t):null)))})),["type"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>null!=t?t:null)))})),e.accessList&&(r.accessList=this.formatter.accessList(e.accessList)),["data"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>t?(0,f.Dv)(t):null)))})),this.formatter.transactionRequest(yield(0,n.mE)(r))}))}_getFilter(t){return Se(this,void 0,void 0,(function*(){t=yield t;const e={};return null!=t.address&&(e.address=this._getAddress(t.address)),["blockHash","topics"].forEach((r=>{null!=t[r]&&(e[r]=t[r])})),["fromBlock","toBlock"].forEach((r=>{null!=t[r]&&(e[r]=this._getBlockTag(t[r]))})),this.formatter.filter(yield(0,n.mE)(e))}))}_call(t,e,r){return Se(this,void 0,void 0,(function*(){r>=10&&Oe.throwError("CCIP read exceeded maximum redirections",i.Yd.errors.SERVER_ERROR,{redirects:r,transaction:t});const n=t.to,o=yield this.perform("call",{transaction:t,blockTag:e});if(r>=0&&"latest"===e&&null!=n&&"0x556f1830"===o.substring(0,10)&&(0,f.E1)(o)%32==4)try{const s=(0,f.p3)(o,4),a=(0,f.p3)(s,0,32);u.O$.from(a).eq(n)||Oe.throwError("CCIP Read sender did not match",i.Yd.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:o});const c=[],l=u.O$.from((0,f.p3)(s,32,64)).toNumber(),d=u.O$.from((0,f.p3)(s,l,l+32)).toNumber(),h=(0,f.p3)(s,l+32);for(let e=0;e<d;e++){const r=Je(h,32*e);null==r&&Oe.throwError("CCIP Read contained corrupt URL string",i.Yd.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:o}),c.push(r)}const p=je(s,64);u.O$.from((0,f.p3)(s,100,128)).isZero()||Oe.throwError("CCIP Read callback selector included junk",i.Yd.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:o});const m=(0,f.p3)(s,96,100),g=je(s,128),A=yield this.ccipReadFetch(t,p,c);null==A&&Oe.throwError("CCIP Read disabled or provided no URLs",i.Yd.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:o});const v={to:n,data:(0,f.xs)([m,Ze([A,g])])};return this._call(v,e,r+1)}catch(t){if(t.code===i.Yd.errors.SERVER_ERROR)throw t}try{return(0,f.Dv)(o)}catch(r){return Oe.throwError("bad result from backend",i.Yd.errors.SERVER_ERROR,{method:"call",params:{transaction:t,blockTag:e},result:o,error:r})}}))}call(t,e){return Se(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,n.mE)({transaction:this._getTransactionRequest(t),blockTag:this._getBlockTag(e),ccipReadEnabled:Promise.resolve(t.ccipReadEnabled)});return this._call(r.transaction,r.blockTag,r.ccipReadEnabled?0:-1)}))}estimateGas(t){return Se(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield(0,n.mE)({transaction:this._getTransactionRequest(t)}),r=yield this.perform("estimateGas",e);try{return u.O$.from(r)}catch(t){return Oe.throwError("bad result from backend",i.Yd.errors.SERVER_ERROR,{method:"estimateGas",params:e,result:r,error:t})}}))}_getAddress(t){return Se(this,void 0,void 0,(function*(){"string"!=typeof(t=yield t)&&Oe.throwArgumentError("invalid address or ENS name","name",t);const e=yield this.resolveName(t);return null==e&&Oe.throwError("ENS name not configured",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:`resolveName(${JSON.stringify(t)})`}),e}))}_getBlock(t,e){return Se(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;let r=-128;const n={includeTransactions:!!e};if((0,f.A7)(t,32))n.blockHash=t;else try{n.blockTag=yield this._getBlockTag(t),(0,f.A7)(n.blockTag)&&(r=parseInt(n.blockTag.substring(2),16))}catch(e){Oe.throwArgumentError("invalid block hash or block tag","blockHashOrBlockTag",t)}return(0,Wt.$l)((()=>Se(this,void 0,void 0,(function*(){const t=yield this.perform("getBlock",n);if(null==t)return null!=n.blockHash&&null==this._emitted["b:"+n.blockHash]||null!=n.blockTag&&r>this._emitted.block?null:void 0;if(e){let e=null;for(let r=0;r<t.transactions.length;r++){const n=t.transactions[r];if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){null==e&&(e=yield this._getInternalBlockNumber(100+2*this.pollingInterval));let t=e-n.blockNumber+1;t<=0&&(t=1),n.confirmations=t}}const r=this.formatter.blockWithTransactions(t);return r.transactions=r.transactions.map((t=>this._wrapTransaction(t))),r}return this.formatter.block(t)}))),{oncePoll:this})}))}getBlock(t){return this._getBlock(t,!1)}getBlockWithTransactions(t){return this._getBlock(t,!0)}getTransaction(t){return Se(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;const e={transactionHash:this.formatter.hash(t,!0)};return(0,Wt.$l)((()=>Se(this,void 0,void 0,(function*(){const r=yield this.perform("getTransaction",e);if(null==r)return null==this._emitted["t:"+t]?null:void 0;const n=this.formatter.transactionResponse(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let t=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;t<=0&&(t=1),n.confirmations=t}return this._wrapTransaction(n)}))),{oncePoll:this})}))}getTransactionReceipt(t){return Se(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;const e={transactionHash:this.formatter.hash(t,!0)};return(0,Wt.$l)((()=>Se(this,void 0,void 0,(function*(){const r=yield this.perform("getTransactionReceipt",e);if(null==r)return null==this._emitted["t:"+t]?null:void 0;if(null==r.blockHash)return;const n=this.formatter.receipt(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let t=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;t<=0&&(t=1),n.confirmations=t}return n}))),{oncePoll:this})}))}getLogs(t){return Se(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield(0,n.mE)({filter:this._getFilter(t)}),r=yield this.perform("getLogs",e);return r.forEach((t=>{null==t.removed&&(t.removed=!1)})),Te.arrayOf(this.formatter.filterLog.bind(this.formatter))(r)}))}getEtherPrice(){return Se(this,void 0,void 0,(function*(){return yield this.getNetwork(),this.perform("getEtherPrice",{})}))}_getBlockTag(t){return Se(this,void 0,void 0,(function*(){if("number"==typeof(t=yield t)&&t<0){t%1&&Oe.throwArgumentError("invalid BlockTag","blockTag",t);let e=yield this._getInternalBlockNumber(100+2*this.pollingInterval);return e+=t,e<0&&(e=0),this.formatter.blockTag(e)}return this.formatter.blockTag(t)}))}getResolver(t){return Se(this,void 0,void 0,(function*(){let e=t;for(;;){if(""===e||"."===e)return null;if("eth"!==t&&"eth"===e)return null;const r=yield this._getResolver(e,"getResolver");if(null!=r){const n=new $e(this,r,t);return e===t||(yield n.supportsWildcard())?n:null}e=e.split(".").slice(1).join(".")}}))}_getResolver(t,e){return Se(this,void 0,void 0,(function*(){null==e&&(e="ENS");const r=yield this.getNetwork();r.ensAddress||Oe.throwError("network does not support ENS",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:e,network:r.name});try{const e=yield this.call({to:r.ensAddress,data:"0x0178b8bf"+Pe(t).substring(2)});return this.formatter.callAddress(e)}catch(t){}return null}))}resolveName(t){return Se(this,void 0,void 0,(function*(){t=yield t;try{return Promise.resolve(this.formatter.address(t))}catch(e){if((0,f.A7)(t))throw e}"string"!=typeof t&&Oe.throwArgumentError("invalid ENS name","name",t);const e=yield this.getResolver(t);return e?yield e.getAddress():null}))}lookupAddress(t){return Se(this,void 0,void 0,(function*(){t=yield t;const e=(t=this.formatter.address(t)).substring(2).toLowerCase()+".addr.reverse",r=yield this._getResolver(e,"lookupAddress");if(null==r)return null;const n=Je(yield this.call({to:r,data:"0x691f3431"+Pe(e).substring(2)}),0);return(yield this.resolveName(n))!=t?null:n}))}getAvatar(t){return Se(this,void 0,void 0,(function*(){let e=null;if((0,f.A7)(t)){const r=this.formatter.address(t).substring(2).toLowerCase()+".addr.reverse",n=yield this._getResolver(r,"getAvatar");if(!n)return null;e=new $e(this,n,r);try{const t=yield e.getAvatar();if(t)return t.url}catch(t){if(t.code!==i.Yd.errors.CALL_EXCEPTION)throw t}try{const t=Je(yield this.call({to:n,data:"0x691f3431"+Pe(r).substring(2)}),0);e=yield this.getResolver(t)}catch(t){if(t.code!==i.Yd.errors.CALL_EXCEPTION)throw t;return null}}else if(e=yield this.getResolver(t),!e)return null;const r=yield e.getAvatar();return null==r?null:r.url}))}perform(t,e){return Oe.throwError(t+" not implemented",i.Yd.errors.NOT_IMPLEMENTED,{operation:t})}_startEvent(t){this.polling=this._events.filter((t=>t.pollable())).length>0}_stopEvent(t){this.polling=this._events.filter((t=>t.pollable())).length>0}_addEventListener(t,e,r){const n=new qe(Me(t),e,r);return this._events.push(n),this._startEvent(n),this}on(t,e){return this._addEventListener(t,e,!1)}once(t,e){return this._addEventListener(t,e,!0)}emit(t,...e){let r=!1,n=[],i=Me(t);return this._events=this._events.filter((t=>t.tag!==i||(setTimeout((()=>{t.listener.apply(this,e)}),0),r=!0,!t.once||(n.push(t),!1)))),n.forEach((t=>{this._stopEvent(t)})),r}listenerCount(t){if(!t)return this._events.length;let e=Me(t);return this._events.filter((t=>t.tag===e)).length}listeners(t){if(null==t)return this._events.map((t=>t.listener));let e=Me(t);return this._events.filter((t=>t.tag===e)).map((t=>t.listener))}off(t,e){if(null==e)return this.removeAllListeners(t);const r=[];let n=!1,i=Me(t);return this._events=this._events.filter((t=>t.tag!==i||t.listener!=e||!!n||(n=!0,r.push(t),!1))),r.forEach((t=>{this._stopEvent(t)})),this}removeAllListeners(t){let e=[];if(null==t)e=this._events,this._events=[];else{const r=Me(t);this._events=this._events.filter((t=>t.tag!==r||(e.push(t),!1)))}return e.forEach((t=>{this._stopEvent(t)})),this}}var nr=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{c(n.next(t))}catch(t){o(t)}}function a(t){try{c(n.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))};const ir=new i.Yd(Zt.i),or=["call","estimateGas"];function sr(t,e){if(null==t)return null;if("string"==typeof t.message&&t.message.match("reverted")){const r=(0,f.A7)(t.data)?t.data:null;if(!e||r)return{message:t.message,data:r}}if("object"==typeof t){for(const r in t){const n=sr(t[r],e);if(n)return n}return null}if("string"==typeof t)try{return sr(JSON.parse(t),e)}catch(t){}return null}function ar(t,e,r){const n=r.transaction||r.signedTransaction;if("call"===t){const t=sr(e,!0);if(t)return t.data;ir.throwError("missing revert data in call exception; Transaction reverted without a reason string",i.Yd.errors.CALL_EXCEPTION,{data:"0x",transaction:n,error:e})}if("estimateGas"===t){let r=sr(e.body,!1);null==r&&(r=sr(e,!1)),r&&ir.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",i.Yd.errors.UNPREDICTABLE_GAS_LIMIT,{reason:r.message,method:t,transaction:n,error:e})}let o=e.message;throw e.code===i.Yd.errors.SERVER_ERROR&&e.error&&"string"==typeof e.error.message?o=e.error.message:"string"==typeof e.body?o=e.body:"string"==typeof e.responseText&&(o=e.responseText),o=(o||"").toLowerCase(),o.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)&&ir.throwError("insufficient funds for intrinsic transaction cost",i.Yd.errors.INSUFFICIENT_FUNDS,{error:e,method:t,transaction:n}),o.match(/nonce (is )?too low/i)&&ir.throwError("nonce has already been used",i.Yd.errors.NONCE_EXPIRED,{error:e,method:t,transaction:n}),o.match(/replacement transaction underpriced|transaction gas price.*too low/i)&&ir.throwError("replacement fee too low",i.Yd.errors.REPLACEMENT_UNDERPRICED,{error:e,method:t,transaction:n}),o.match(/only replay-protected/i)&&ir.throwError("legacy pre-eip-155 transactions not supported",i.Yd.errors.UNSUPPORTED_OPERATION,{error:e,method:t,transaction:n}),or.indexOf(t)>=0&&o.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)&&ir.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",i.Yd.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,method:t,transaction:n}),e}function cr(t){return new Promise((function(e){setTimeout(e,t)}))}function lr(t){if(t.error){const e=new Error(t.error.message);throw e.code=t.error.code,e.data=t.error.data,e}return t.result}function ur(t){return t?t.toLowerCase():t}const fr={};class dr extends l{constructor(t,e,r){if(super(),t!==fr)throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");(0,n.zG)(this,"provider",e),null==r&&(r=0),"string"==typeof r?((0,n.zG)(this,"_address",this.provider.formatter.address(r)),(0,n.zG)(this,"_index",null)):"number"==typeof r?((0,n.zG)(this,"_index",r),(0,n.zG)(this,"_address",null)):ir.throwArgumentError("invalid address or index","addressOrIndex",r)}connect(t){return ir.throwError("cannot alter JSON-RPC Signer connection",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"connect"})}connectUnchecked(){return new hr(fr,this.provider,this._address||this._index)}getAddress(){return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then((t=>(t.length<=this._index&&ir.throwError("unknown account #"+this._index,i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"getAddress"}),this.provider.formatter.address(t[this._index]))))}sendUncheckedTransaction(t){t=(0,n.DC)(t);const e=this.getAddress().then((t=>(t&&(t=t.toLowerCase()),t)));if(null==t.gasLimit){const r=(0,n.DC)(t);r.from=e,t.gasLimit=this.provider.estimateGas(r)}return null!=t.to&&(t.to=Promise.resolve(t.to).then((t=>nr(this,void 0,void 0,(function*(){if(null==t)return null;const e=yield this.provider.resolveName(t);return null==e&&ir.throwArgumentError("provided ENS name resolves to null","tx.to",t),e}))))),(0,n.mE)({tx:(0,n.mE)(t),sender:e}).then((({tx:e,sender:r})=>{null!=e.from?e.from.toLowerCase()!==r&&ir.throwArgumentError("from address mismatch","transaction",t):e.from=r;const n=this.provider.constructor.hexlifyTransaction(e,{from:!0});return this.provider.send("eth_sendTransaction",[n]).then((t=>t),(t=>("string"==typeof t.message&&t.message.match(/user denied/i)&&ir.throwError("user rejected transaction",i.Yd.errors.ACTION_REJECTED,{action:"sendTransaction",transaction:e}),ar("sendTransaction",t,n))))}))}signTransaction(t){return ir.throwError("signing transactions is unsupported",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"signTransaction"})}sendTransaction(t){return nr(this,void 0,void 0,(function*(){const e=yield this.provider._getInternalBlockNumber(100+2*this.provider.pollingInterval),r=yield this.sendUncheckedTransaction(t);try{return yield(0,Wt.$l)((()=>nr(this,void 0,void 0,(function*(){const t=yield this.provider.getTransaction(r);if(null!==t)return this.provider._wrapTransaction(t,r,e)}))),{oncePoll:this.provider})}catch(t){throw t.transactionHash=r,t}}))}signMessage(t){return nr(this,void 0,void 0,(function*(){const e="string"==typeof t?(0,R.Y0)(t):t,r=yield this.getAddress();try{return yield this.provider.send("personal_sign",[(0,f.Dv)(e),r.toLowerCase()])}catch(e){throw"string"==typeof e.message&&e.message.match(/user denied/i)&&ir.throwError("user rejected signing",i.Yd.errors.ACTION_REJECTED,{action:"signMessage",from:r,messageData:t}),e}}))}_legacySignMessage(t){return nr(this,void 0,void 0,(function*(){const e="string"==typeof t?(0,R.Y0)(t):t,r=yield this.getAddress();try{return yield this.provider.send("eth_sign",[r.toLowerCase(),(0,f.Dv)(e)])}catch(e){throw"string"==typeof e.message&&e.message.match(/user denied/i)&&ir.throwError("user rejected signing",i.Yd.errors.ACTION_REJECTED,{action:"_legacySignMessage",from:r,messageData:t}),e}}))}_signTypedData(t,e,r){return nr(this,void 0,void 0,(function*(){const n=yield K.resolveNames(t,e,r,(t=>this.provider.resolveName(t))),o=yield this.getAddress();try{return yield this.provider.send("eth_signTypedData_v4",[o.toLowerCase(),JSON.stringify(K.getPayload(n.domain,e,n.value))])}catch(t){throw"string"==typeof t.message&&t.message.match(/user denied/i)&&ir.throwError("user rejected signing",i.Yd.errors.ACTION_REJECTED,{action:"_signTypedData",from:o,messageData:{domain:n.domain,types:e,value:n.value}}),t}}))}unlock(t){return nr(this,void 0,void 0,(function*(){const e=this.provider,r=yield this.getAddress();return e.send("personal_unlockAccount",[r.toLowerCase(),t,null])}))}}class hr extends dr{sendTransaction(t){return this.sendUncheckedTransaction(t).then((t=>({hash:t,nonce:null,gasLimit:null,gasPrice:null,data:null,value:null,chainId:null,confirmations:0,from:null,wait:e=>this.provider.waitForTransaction(t,e)})))}}const pr={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0};class mr extends rr{constructor(t,e){let r=e;null==r&&(r=new Promise(((t,e)=>{setTimeout((()=>{this.detectNetwork().then((e=>{t(e)}),(t=>{e(t)}))}),0)}))),super(r),t||(t=(0,n.tu)(this.constructor,"defaultUrl")()),"string"==typeof t?(0,n.zG)(this,"connection",Object.freeze({url:t})):(0,n.zG)(this,"connection",Object.freeze((0,n.DC)(t))),this._nextId=42}get _cache(){return null==this._eventLoopCache&&(this._eventLoopCache={}),this._eventLoopCache}static defaultUrl(){return"http://localhost:8545"}detectNetwork(){return this._cache.detectNetwork||(this._cache.detectNetwork=this._uncachedDetectNetwork(),setTimeout((()=>{this._cache.detectNetwork=null}),0)),this._cache.detectNetwork}_uncachedDetectNetwork(){return nr(this,void 0,void 0,(function*(){yield cr(0);let t=null;try{t=yield this.send("eth_chainId",[])}catch(e){try{t=yield this.send("net_version",[])}catch(t){}}if(null!=t){const e=(0,n.tu)(this.constructor,"getNetwork");try{return e(u.O$.from(t).toNumber())}catch(e){return ir.throwError("could not detect network",i.Yd.errors.NETWORK_ERROR,{chainId:t,event:"invalidNetwork",serverError:e})}}return ir.throwError("could not detect network",i.Yd.errors.NETWORK_ERROR,{event:"noNetwork"})}))}getSigner(t){return new dr(fr,this,t)}getUncheckedSigner(t){return this.getSigner(t).connectUnchecked()}listAccounts(){return this.send("eth_accounts",[]).then((t=>t.map((t=>this.formatter.address(t)))))}send(t,e){const r={method:t,params:e,id:this._nextId++,jsonrpc:"2.0"};this.emit("debug",{action:"request",request:(0,n.p$)(r),provider:this});const i=["eth_chainId","eth_blockNumber"].indexOf(t)>=0;if(i&&this._cache[t])return this._cache[t];const o=(0,Wt.rd)(this.connection,JSON.stringify(r),lr).then((t=>(this.emit("debug",{action:"response",request:r,response:t,provider:this}),t)),(t=>{throw this.emit("debug",{action:"response",error:t,request:r,provider:this}),t}));return i&&(this._cache[t]=o,setTimeout((()=>{this._cache[t]=null}),0)),o}prepareRequest(t,e){switch(t){case"getBlockNumber":return["eth_blockNumber",[]];case"getGasPrice":return["eth_gasPrice",[]];case"getBalance":return["eth_getBalance",[ur(e.address),e.blockTag]];case"getTransactionCount":return["eth_getTransactionCount",[ur(e.address),e.blockTag]];case"getCode":return["eth_getCode",[ur(e.address),e.blockTag]];case"getStorageAt":return["eth_getStorageAt",[ur(e.address),(0,f.$m)(e.position,32),e.blockTag]];case"sendTransaction":return["eth_sendRawTransaction",[e.signedTransaction]];case"getBlock":return e.blockTag?["eth_getBlockByNumber",[e.blockTag,!!e.includeTransactions]]:e.blockHash?["eth_getBlockByHash",[e.blockHash,!!e.includeTransactions]]:null;case"getTransaction":return["eth_getTransactionByHash",[e.transactionHash]];case"getTransactionReceipt":return["eth_getTransactionReceipt",[e.transactionHash]];case"call":return["eth_call",[(0,n.tu)(this.constructor,"hexlifyTransaction")(e.transaction,{from:!0}),e.blockTag]];case"estimateGas":return["eth_estimateGas",[(0,n.tu)(this.constructor,"hexlifyTransaction")(e.transaction,{from:!0})]];case"getLogs":return e.filter&&null!=e.filter.address&&(e.filter.address=ur(e.filter.address)),["eth_getLogs",[e.filter]]}return null}perform(t,e){return nr(this,void 0,void 0,(function*(){if("call"===t||"estimateGas"===t){const t=e.transaction;if(t&&null!=t.type&&u.O$.from(t.type).isZero()&&null==t.maxFeePerGas&&null==t.maxPriorityFeePerGas){const r=yield this.getFeeData();null==r.maxFeePerGas&&null==r.maxPriorityFeePerGas&&((e=(0,n.DC)(e)).transaction=(0,n.DC)(t),delete e.transaction.type)}}const r=this.prepareRequest(t,e);null==r&&ir.throwError(t+" not implemented",i.Yd.errors.NOT_IMPLEMENTED,{operation:t});try{return yield this.send(r[0],r[1])}catch(r){return ar(t,r,e)}}))}_startEvent(t){"pending"===t.tag&&this._startPending(),super._startEvent(t)}_startPending(){if(null!=this._pendingFilter)return;const t=this,e=this.send("eth_newPendingTransactionFilter",[]);this._pendingFilter=e,e.then((function(r){return function n(){t.send("eth_getFilterChanges",[r]).then((function(r){if(t._pendingFilter!=e)return null;let n=Promise.resolve();return r.forEach((function(e){t._emitted["t:"+e.toLowerCase()]="pending",n=n.then((function(){return t.getTransaction(e).then((function(e){return t.emit("pending",e),null}))}))})),n.then((function(){return cr(1e3)}))})).then((function(){if(t._pendingFilter==e)return setTimeout((function(){n()}),0),null;t.send("eth_uninstallFilter",[r])})).catch((t=>{}))}(),r})).catch((t=>{}))}_stopEvent(t){"pending"===t.tag&&0===this.listenerCount("pending")&&(this._pendingFilter=null),super._stopEvent(t)}static hexlifyTransaction(t,e){const r=(0,n.DC)(pr);if(e)for(const t in e)e[t]&&(r[t]=!0);(0,n.uj)(t,r);const i={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((function(e){if(null==t[e])return;const r=(0,f.$P)(u.O$.from(t[e]));"gasLimit"===e&&(e="gas"),i[e]=r})),["from","to","data"].forEach((function(e){null!=t[e]&&(i[e]=(0,f.Dv)(t[e]))})),t.accessList&&(i.accessList=Kt(t.accessList)),i}}},12139:(t,e,r)=>{r.d(e,{Y0:()=>u,XL:()=>d,ZN:()=>f});var n=r(39157);const i=new(r(56487).Yd)("strings/5.7.0");var o,s;function a(t,e,r,n,i){if(t===s.BAD_PREFIX||t===s.UNEXPECTED_CONTINUE){let t=0;for(let n=e+1;n<r.length&&r[n]>>6==2;n++)t++;return t}return t===s.OVERRUN?r.length-e-1:0}!function(t){t.current="",t.NFC="NFC",t.NFD="NFD",t.NFKC="NFKC",t.NFKD="NFKD"}(o||(o={})),function(t){t.UNEXPECTED_CONTINUE="unexpected continuation byte",t.BAD_PREFIX="bad codepoint prefix",t.OVERRUN="string overrun",t.MISSING_CONTINUE="missing continuation byte",t.OUT_OF_RANGE="out of UTF-8 range",t.UTF16_SURROGATE="UTF-16 surrogate",t.OVERLONG="overlong representation"}(s||(s={}));const c=Object.freeze({error:function(t,e,r,n,o){return i.throwArgumentError(`invalid codepoint at offset ${e}; ${t}`,"bytes",r)},ignore:a,replace:function(t,e,r,n,i){return t===s.OVERLONG?(n.push(i),0):(n.push(65533),a(t,e,r))}});function l(t,e){null==e&&(e=c.error),t=(0,n.lE)(t);const r=[];let i=0;for(;i<t.length;){const n=t[i++];if(n>>7==0){r.push(n);continue}let o=null,a=null;if(192==(224&n))o=1,a=127;else if(224==(240&n))o=2,a=2047;else{if(240!=(248&n)){i+=e(128==(192&n)?s.UNEXPECTED_CONTINUE:s.BAD_PREFIX,i-1,t,r);continue}o=3,a=65535}if(i-1+o>=t.length){i+=e(s.OVERRUN,i-1,t,r);continue}let c=n&(1<<8-o-1)-1;for(let n=0;n<o;n++){let n=t[i];if(128!=(192&n)){i+=e(s.MISSING_CONTINUE,i,t,r),c=null;break}c=c<<6|63&n,i++}null!==c&&(c>1114111?i+=e(s.OUT_OF_RANGE,i-1-o,t,r,c):c>=55296&&c<=57343?i+=e(s.UTF16_SURROGATE,i-1-o,t,r,c):c<=a?i+=e(s.OVERLONG,i-1-o,t,r,c):r.push(c))}return r}function u(t,e=o.current){e!=o.current&&(i.checkNormalize(),t=t.normalize(e));let r=[];for(let e=0;e<t.length;e++){const n=t.charCodeAt(e);if(n<128)r.push(n);else if(n<2048)r.push(n>>6|192),r.push(63&n|128);else if(55296==(64512&n)){e++;const i=t.charCodeAt(e);if(e>=t.length||56320!=(64512&i))throw new Error("invalid utf-8 string");const o=65536+((1023&n)<<10)+(1023&i);r.push(o>>18|240),r.push(o>>12&63|128),r.push(o>>6&63|128),r.push(63&o|128)}else r.push(n>>12|224),r.push(n>>6&63|128),r.push(63&n|128)}return(0,n.lE)(r)}function f(t,e){return l(t,e).map((t=>t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10&1023),56320+(1023&t))))).join("")}function d(t,e=o.current){return l(u(t,e))}},64128:(t,e,r)=>{r.d(e,{rd:()=>d,$l:()=>h});var n=r(26627),i=r(39157),o=r(8164),s=r(12139),a=r(56487);function c(t,e){return r=this,n=void 0,s=function*(){null==e&&(e={});const r={method:e.method||"GET",headers:e.headers||{},body:e.body||void 0};if(!0!==e.skipFetchSetup&&(r.mode="cors",r.cache="no-cache",r.credentials="same-origin",r.redirect="follow",r.referrer="client"),null!=e.fetchOptions){const t=e.fetchOptions;t.mode&&(r.mode=t.mode),t.cache&&(r.cache=t.cache),t.credentials&&(r.credentials=t.credentials),t.redirect&&(r.redirect=t.redirect),t.referrer&&(r.referrer=t.referrer)}const n=yield fetch(t,r),o=yield n.arrayBuffer(),s={};return n.headers.forEach?n.headers.forEach(((t,e)=>{s[e.toLowerCase()]=t})):n.headers.keys().forEach((t=>{s[t.toLowerCase()]=n.headers.get(t)})),{headers:s,statusCode:n.status,statusMessage:n.statusText,body:(0,i.lE)(new Uint8Array(o))}},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{c(s.next(t))}catch(t){e(t)}}function a(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var r;e.done?t(e.value):(r=e.value,r instanceof o?r:new o((function(t){t(r)}))).then(i,a)}c((s=s.apply(r,n||[])).next())}));var r,n,o,s}const l=new a.Yd("web/5.7.1");function u(t){return new Promise((e=>{setTimeout(e,t)}))}function f(t,e){if(null==t)return null;if("string"==typeof t)return t;if((0,i.Zq)(t)){if(e&&("text"===e.split("/")[0]||"application/json"===e.split(";")[0].trim()))try{return(0,s.ZN)(t)}catch(t){}return(0,i.Dv)(t)}return t}function d(t,e,r){let i=null;if(null!=e){i=(0,s.Y0)(e);const r="string"==typeof t?{url:t}:(0,o.DC)(t);r.headers?0!==Object.keys(r.headers).filter((t=>"content-type"===t.toLowerCase())).length||(r.headers=(0,o.DC)(r.headers),r.headers["content-type"]="application/json"):r.headers={"content-type":"application/json"},t=r}return function(t,e,r){const i="object"==typeof t&&null!=t.throttleLimit?t.throttleLimit:12;l.assertArgument(i>0&&i%1==0,"invalid connection throttle limit","connection.throttleLimit",i);const d="object"==typeof t?t.throttleCallback:null,h="object"==typeof t&&"number"==typeof t.throttleSlotInterval?t.throttleSlotInterval:100;l.assertArgument(h>0&&h%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",h);const p="object"==typeof t&&!!t.errorPassThrough,m={};let g=null;const A={method:"GET"};let v=!1,y=12e4;if("string"==typeof t)g=t;else if("object"==typeof t){if(null!=t&&null!=t.url||l.throwArgumentError("missing URL","connection.url",t),g=t.url,"number"==typeof t.timeout&&t.timeout>0&&(y=t.timeout),t.headers)for(const e in t.headers)m[e.toLowerCase()]={key:e,value:String(t.headers[e])},["if-none-match","if-modified-since"].indexOf(e.toLowerCase())>=0&&(v=!0);if(A.allowGzip=!!t.allowGzip,null!=t.user&&null!=t.password){"https:"!==g.substring(0,6)&&!0!==t.allowInsecureAuthentication&&l.throwError("basic authentication requires a secure https url",a.Yd.errors.INVALID_ARGUMENT,{argument:"url",url:g,user:t.user,password:"[REDACTED]"});const e=t.user+":"+t.password;m.authorization={key:"Authorization",value:"Basic "+(0,n.c)((0,s.Y0)(e))}}null!=t.skipFetchSetup&&(A.skipFetchSetup=!!t.skipFetchSetup),null!=t.fetchOptions&&(A.fetchOptions=(0,o.DC)(t.fetchOptions))}const b=new RegExp("^data:([^;:]*)?(;base64)?,(.*)$","i"),w=g?g.match(b):null;if(w)try{const t={statusCode:200,statusMessage:"OK",headers:{"content-type":w[1]||"text/plain"},body:w[2]?(0,n.J)(w[3]):(E=w[3],(0,s.Y0)(E.replace(/%([0-9a-f][0-9a-f])/gi,((t,e)=>String.fromCharCode(parseInt(e,16))))))};let e=t.body;return r&&(e=r(t.body,t)),Promise.resolve(e)}catch(t){l.throwError("processing response error",a.Yd.errors.SERVER_ERROR,{body:f(w[1],w[2]),error:t,requestBody:null,requestMethod:"GET",url:g})}var E;e&&(A.method="POST",A.body=e,null==m["content-type"]&&(m["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==m["content-length"]&&(m["content-length"]={key:"Content-Length",value:String(e.length)}));const k={};Object.keys(m).forEach((t=>{const e=m[t];k[e.key]=e.value})),A.headers=k;const N=function(){let t=null;return{promise:new Promise((function(e,r){y&&(t=setTimeout((()=>{null!=t&&(t=null,r(l.makeError("timeout",a.Yd.errors.TIMEOUT,{requestBody:f(A.body,k["content-type"]),requestMethod:A.method,timeout:y,url:g})))}),y))})),cancel:function(){null!=t&&(clearTimeout(t),t=null)}}}(),I=function(){return t=this,e=void 0,o=function*(){for(let t=0;t<i;t++){let e=null;try{if(e=yield c(g,A),t<i)if(301===e.statusCode||302===e.statusCode){const t=e.headers.location||"";if("GET"===A.method&&t.match(/^https:/)){g=e.headers.location;continue}}else if(429===e.statusCode){let r=!0;if(d&&(r=yield d(t,g)),r){let r=0;const n=e.headers["retry-after"];r="string"==typeof n&&n.match(/^[1-9][0-9]*$/)?1e3*parseInt(n):h*parseInt(String(Math.random()*Math.pow(2,t))),yield u(r);continue}}}catch(t){e=t.response,null==e&&(N.cancel(),l.throwError("missing response",a.Yd.errors.SERVER_ERROR,{requestBody:f(A.body,k["content-type"]),requestMethod:A.method,serverError:t,url:g}))}let n=e.body;if(v&&304===e.statusCode?n=null:!p&&(e.statusCode<200||e.statusCode>=300)&&(N.cancel(),l.throwError("bad response",a.Yd.errors.SERVER_ERROR,{status:e.statusCode,headers:e.headers,body:f(n,e.headers?e.headers["content-type"]:null),requestBody:f(A.body,k["content-type"]),requestMethod:A.method,url:g})),r)try{const t=yield r(n,e);return N.cancel(),t}catch(r){if(r.throttleRetry&&t<i){let e=!0;if(d&&(e=yield d(t,g)),e){const e=h*parseInt(String(Math.random()*Math.pow(2,t)));yield u(e);continue}}N.cancel(),l.throwError("processing response error",a.Yd.errors.SERVER_ERROR,{body:f(n,e.headers?e.headers["content-type"]:null),error:r,requestBody:f(A.body,k["content-type"]),requestMethod:A.method,url:g})}return N.cancel(),n}return l.throwError("failed response",a.Yd.errors.SERVER_ERROR,{requestBody:f(A.body,k["content-type"]),requestMethod:A.method,url:g})},new((n=void 0)||(n=Promise))((function(r,i){function s(t){try{c(o.next(t))}catch(t){i(t)}}function a(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((o=o.apply(t,e||[])).next())}));var t,e,n,o}();return Promise.race([N.promise,I])}(t,i,((t,e)=>{let n=null;if(null!=t)try{n=JSON.parse((0,s.ZN)(t))}catch(e){l.throwError("invalid JSON",a.Yd.errors.SERVER_ERROR,{body:t,error:e})}return r&&(n=r(n,e)),n}))}function h(t,e){return e||(e={}),null==(e=(0,o.DC)(e)).floor&&(e.floor=0),null==e.ceiling&&(e.ceiling=1e4),null==e.interval&&(e.interval=250),new Promise((function(r,n){let i=null,o=!1;const s=()=>!o&&(o=!0,i&&clearTimeout(i),!0);e.timeout&&(i=setTimeout((()=>{s()&&n(new Error("timeout"))}),e.timeout));const a=e.retryLimit;let c=0;!function i(){return t().then((function(t){if(void 0!==t)s()&&r(t);else if(e.oncePoll)e.oncePoll.once("poll",i);else if(e.onceBlock)e.onceBlock.once("block",i);else if(!o){if(c++,c>a)return void(s()&&n(new Error("retry limit reached")));let t=e.interval*parseInt(String(Math.random()*Math.pow(2,c)));t<e.floor&&(t=e.floor),t>e.ceiling&&(t=e.ceiling),setTimeout(i,t)}return null}),(function(t){s()&&n(t)}))}()}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,